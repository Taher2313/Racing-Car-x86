; this code makes a car racing game between two players
; authors : Taher , Omar , Menna , Nada

;--------------- Helper Drawing MACROS ------------
Fill_background macro color                            ; fill the screen 320*200 with specific color given as an arg to the macro
   ; starting from index 0,0
    mov cx,0
    mov dx,0
    mov al,color
    mov ah,0ch 
    ; fill column by column
    fill_width: int 10h
    inc cx
    fill_height: int 10h
    inc dx
    cmp dx,200     
    jnz fill_height
    cmp cx,320
    mov dx,0
    jnz fill_width
endm Fill_background
;-----------------------------------------------
; set indices and color before calling the proc which will draw the rectangle 
set_indices macro x,y,x_f,y_f,color
mov cx,x
mov dx,y
mov ax, x_f
mov x_final,ax     ; x_final is considered to be the width of the tack
mov ax,y_f
mov y_final,ax     ; y_final is considered to be the width of the track

mov bx,y          ; we will need this in the proc of Draw
mov ax,x
mov x_initial,ax  ; will need this for the final line 

mov al,color
endm set_indices
;------------------------ Macors ------------------------
showMes macro  mes   ; MACROS
    mov ah,09
    lea dx ,mes
    int 21h
endm showMes

showChar macro char
    mov ah,2
    mov dl,char
    int 21h
endm showChar

checkbuffer macro    ;;  al = asci-Coed
    mov al,0         ;;  ah = scan-code
    mov ah,1
    mov ch ,ah        ;; just for check scan-code
    int 16h
endm  checkbuffer

readChar macro      ;;  al = asci-Coed
    mov al,0        ;;  ah = scan-code
    mov ah,0
    int 16h
endm readChar

readStr macro str
    mov ah,0ah
    mov dx ,offset str
    int 21h
endm readStr

setCursor macro x,y,page
    mov bh,page
    mov dh,x
    mov dl,y
    mov ah,02
    int 10h
endm setCursor

clearScreen macro
    mov ax ,0600h
    mov bh ,34h
    mov cx,0
    mov dx,184fh
    int 10h
endm clearScreen

clearRow macro row
mov ax ,0600h
mov bh ,34h
mov cl,0        ; start
mov ch,row 
mov dl,79       ; end
mov dh,row
int 10h
endm clearRow   

changePage macro page
    mov ah , 05h
    mov al , page
    int 10h
endm  changePage

scrolUpper macro 
    mov ah,6  ; function 6
    mov al,1  ; scroll by 1 line
    mov bh,7  ; normal video attribute
    mov ch,0  ; upper left Y
    mov cl,0  ; upper left X
    mov dh,12 ; lower right Y
    mov dl,79 ; lower right X
    int 10h
endm scrolUpper

scrolDown macro 
    mov ah,6  ; function 6
    mov al,1  ; scroll by 1 line
    mov bh,7  ; normal video attribute
    mov ch,13 ; upper left Y
    mov cl,0  ; upper left X
    mov dh,24 ; lower right Y
    mov dl,79 ; lower right X
    int 10h
endm scrolDown

get_pixel_color macro  x , y  ; get color in al
mov ah, 0DH
mov cx , x
mov dx , y
int 10h
endm


;-----------------------------------------------------
    .286
    .Model small
    .stack 1000
;------------------------------------------------------
.DATA

; ------------ define name vaiables -------
mes1 db  'please enter your name player 1 (maximum 5 characters)' ,'$'
mes2 db  'please enter any key to continue',' $'
mes3 db  'please enter your name player 2 (maximum 5 characters)' ,'$'
mes4 db  'name should start with letter please enter it again $'
mes5 db  'max size for name is 15 char please enter it again  $'
player1 db 16,?,16 dup('$') ,'$'
player2 db 16,?,16 dup('$') ,'$'
; ------------ main Screen vaiables -------
messege1 db '* to Start Chatting press F1 $'
messege2 db '* to start playing racing car Game press F2 $'
messege3 db '* to exit the program press Esc $'

breakLine db '--------------------------------------------------------------------------------$'

sendChat    db '-  you sent chat invitaion to $'
sendPlay    db '-  you send a playing invitaion to $'

receiveChat db '-  you received chat invitaion from $'
receiveChat2 db ' press f1 to accept $'

receivePlay db '-  you reeived a playing invitaion from $'
receivePlay2 db ' press f2 to accept $'

isWaitChatRespons db 0 
isWaitGameRespons db 0


; ------------ Chatting mode vaiables -------
cmes1 db 'chattig mode  $'
endChat db '- to end chatting press F3 $'

; ------------ Game mode vaiables -------
game_mes1 db 'Game mode  $'
returnMainScr db 'To Return To main Screen press F4 $'
endGame db 'EXIT = F4$'

;-------------------------------- modes illustration ;--------------------------------

;; each mode is represented by conncting the ref by any point ont the square
;; and the number of mode is the number of the point
;
;            8           1          2
;                       
;             
;            7          ref         3  
;
;
;            6           5          4


                     

;;;;;;;;;;;;;;;; data of the car images in each mode ;;;;;;;;;;;;;;;;;;;
                           
img1 DB 15,24,0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 244, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 244, 244, 20, 41, 41, 41, 41, 41, 41, 41, 41 
 DB 41, 41, 41, 20, 244, 244, 20, 137, 6, 6, 6, 41, 41, 41, 6, 6, 6, 137, 20, 244, 244, 244, 244, 244, 244, 6, 41, 41, 41, 6, 244, 244, 244, 244, 244, 244, 244, 244, 150, 161 
 DB 41, 41, 41, 41, 41, 161, 150, 244, 244, 244, 244, 244, 20, 174, 6, 41, 41, 41, 41, 41, 6, 174, 20, 244, 244, 20, 20, 173, 22, 41, 41, 41, 41, 41, 41, 41, 22, 173, 20, 20 
 DB 0, 0, 172, 138, 41, 41, 114, 113, 114, 41, 41, 138, 172, 0, 0, 0, 0, 22, 41, 41, 41, 41, 41, 41, 41, 41, 41, 22, 0, 0, 0, 0, 6, 41, 41, 41, 6, 6, 6, 41 
 DB 41, 41, 6, 0, 0, 0, 0, 41, 41, 41, 41, 209, 208, 209, 41, 41, 41, 41, 0, 0, 0, 0, 41, 41, 41, 41, 209, 208, 209, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 41 
 DB 41, 113, 208, 113, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 6, 41, 41, 41, 0, 0, 0, 0, 244, 244, 20, 20, 136, 41, 41, 41, 41, 41, 136, 20, 20, 244, 20 
 DB 20, 244, 244, 244, 220, 41, 41, 41, 41, 41, 220, 244, 244, 244, 244, 244, 244, 244, 20, 150, 41, 41, 41, 41, 41, 149, 20, 244, 244, 244, 244, 244, 244, 20, 173, 162, 41, 41, 41, 162 
 DB 173, 20, 244, 244, 244, 244, 244, 244, 20, 149, 6, 41, 41, 41, 6, 150, 244, 244, 244, 244, 244, 244, 244, 244, 220, 41, 41, 41, 41, 41, 244, 244, 244, 244, 244, 244, 136, 6, 6, 41 
 DB 41, 41, 41, 41, 41, 41, 6, 6, 137, 244, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 40, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0 
 



img2 DB 27,27,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 21, 244, 137, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 244, 20, 137, 41, 41, 41, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 244, 20, 20, 6, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16 
 DB 244, 244, 244, 20, 137, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 244, 20, 20, 20, 20, 6, 41, 41, 41, 41, 41, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 150, 150, 150, 21, 21, 136, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 22, 172, 22, 161, 6, 6, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 138, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41 
 DB 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 6, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 20, 0, 0, 41 
 DB 41, 41, 41, 41, 41, 114, 6, 41, 41, 41, 137, 20, 137, 41, 6, 6, 137, 0, 0, 0, 0, 104, 244, 244, 151, 0, 41, 41, 41, 41, 41, 41, 6, 114, 41, 41, 6, 161, 20, 20 
 DB 137, 20, 20, 244, 0, 0, 0, 124, 244, 244, 244, 20, 244, 41, 41, 41, 6, 113, 114, 41, 41, 41, 41, 6, 175, 20, 244, 20, 20, 244, 0, 0, 0, 124, 244, 244, 244, 244, 20, 20 
 DB 41, 41, 6, 209, 208, 209, 6, 41, 41, 41, 162, 175, 244, 244, 244, 244, 0, 0, 0, 16, 244, 244, 244, 244, 20, 20, 220, 41, 41, 6, 208, 208, 113, 41, 41, 41, 6, 22, 174, 244 
 DB 244, 244, 0, 0, 0, 0, 21, 20, 244, 244, 20, 150, 149, 41, 41, 41, 41, 114, 114, 41, 41, 41, 41, 6, 22, 16, 20, 20, 0, 0, 0, 0, 0, 41, 6, 136, 244, 20, 149, 162 
 DB 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 0, 0, 0, 0, 0, 0, 0, 0, 6, 41, 41, 41, 114, 220, 138, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 20, 21, 0, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41 
 DB 41, 41, 41, 161, 161, 244, 244, 20, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 6, 22, 150, 20, 244, 244, 20, 147, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 137, 151, 20, 20, 244, 244, 244, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41 
 DB 41, 41, 41, 6, 244, 244, 244, 244, 244, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 136, 244, 244, 244, 244, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 6, 20, 244, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 41, 41, 40, 136, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 40, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0


img3 DB 24,15,0, 0, 244, 244, 244, 244, 244, 20, 244, 0, 0, 0, 0, 0, 0, 0, 20, 244, 244, 244, 244, 244, 244, 0, 41, 41, 136, 244, 244, 244, 244, 244, 244, 0, 0, 0, 0, 0, 0, 0 
 DB 20, 244, 244, 244, 20, 20, 6, 41, 41, 41, 6, 244, 244, 244, 244, 244, 20, 0, 0, 41, 41, 6, 22, 172, 173, 20, 244, 244, 137, 41, 41, 41, 41, 41, 6, 244, 20, 20, 20, 244 
 DB 20, 0, 0, 41, 41, 41, 41, 138, 22, 174, 150, 244, 6, 41, 41, 41, 41, 41, 41, 220, 149, 173, 150, 220, 136, 41, 41, 41, 41, 41, 41, 41, 41, 6, 161, 244, 6, 41, 41, 41 
 DB 41, 41, 41, 41, 6, 162, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 113, 209, 209, 6, 41, 114 
 DB 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 208, 208, 208, 6, 41, 113, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41 
 DB 41, 41, 113, 209, 209, 6, 41, 114, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 162, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 6, 41, 41, 41 
 DB 41, 41, 41, 244, 150, 173, 149, 220, 136, 41, 41, 41, 41, 41, 41, 41, 41, 6, 161, 244, 6, 41, 41, 41, 41, 41, 6, 244, 244, 20, 20, 244, 20, 0, 0, 41, 41, 41, 41, 138 
 DB 22, 174, 150, 244, 6, 41, 41, 41, 41, 41, 6, 244, 244, 244, 244, 244, 20, 0, 0, 41, 41, 6, 22, 172, 173, 20, 244, 244, 137, 41, 41, 41, 41, 40, 137, 244, 244, 244, 244, 244 
 DB 244, 0, 0, 0, 0, 0, 0, 0, 20, 244, 244, 244, 20, 20, 6, 41, 0, 0, 244, 244, 244, 244, 244, 244, 20, 0, 0, 0, 0, 0, 0, 0, 20, 244, 244, 244, 244, 244, 244, 0 
 


img4 DB 27,27,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 21 
 DB 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 6, 20, 244, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 136, 244, 244, 244, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 114, 244 
 DB 244, 244, 244, 244, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 220, 20, 20, 244, 244, 244, 244, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 138, 149, 150, 20, 244, 244, 244, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 6 
 DB 162, 149, 20, 20, 20, 151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 220, 20, 244, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 4, 41, 41, 41, 6, 137, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 6, 136, 244, 151, 22, 161, 41 
 DB 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 20, 244, 244, 20, 150, 161, 41, 41, 41, 41, 6, 6, 41, 41, 41, 41, 161, 22, 16, 20 
 DB 16, 0, 0, 0, 0, 0, 244, 244, 244, 244, 20, 20, 244, 41, 41, 41, 114, 208, 209, 6, 41, 41, 41, 138, 172, 150, 244, 244, 21, 0, 0, 0, 0, 0, 20, 244, 244, 244, 244, 244 
 DB 20, 41, 41, 114, 208, 208, 113, 41, 41, 41, 6, 22, 150, 20, 244, 244, 20, 0, 0, 0, 0, 0, 244, 244, 244, 244, 20, 21, 41, 41, 41, 113, 209, 114, 41, 41, 41, 41, 161, 150 
 DB 20, 244, 20, 244, 21, 0, 0, 0, 0, 0, 244, 244, 20, 244, 0, 41, 41, 41, 41, 6, 41, 6, 114, 41, 41, 6, 21, 20, 20, 20, 20, 244, 0, 0, 0, 0, 0, 0, 20, 147 
 DB 0, 40, 41, 41, 41, 41, 41, 41, 114, 6, 41, 41, 6, 21, 20, 137, 6, 137, 137, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41 
 DB 136, 6, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 22, 22, 162, 6, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 174, 175, 175, 161, 137, 6, 41 
 DB 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 244, 244, 20, 20, 20, 6, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 20, 244, 244, 244, 20, 137, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 244, 20, 137, 41, 41 
 DB 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 20, 20, 6, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 20, 6, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 137 
 DB 41, 0, 0, 0, 0, 0, 0, 0, 0




img5 DB 15,24,0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 40, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 244, 137, 6, 6, 41, 41, 41, 41, 41 
 DB 41, 41, 6, 6, 136, 0, 244, 244, 244, 244, 244, 41, 41, 41, 41, 41, 220, 244, 244, 244, 0, 244, 244, 244, 244, 150, 6, 41, 41, 41, 6, 149, 20, 244, 244, 0, 244, 244, 244, 20 
 DB 173, 162, 41, 41, 41, 162, 173, 20, 244, 244, 0, 244, 244, 244, 20, 149, 41, 41, 41, 41, 41, 150, 20, 244, 244, 0, 244, 244, 244, 244, 220, 41, 41, 41, 41, 41, 220, 244, 244, 244 
 DB 0, 20, 244, 20, 20, 136, 41, 41, 41, 41, 41, 136, 20, 20, 244, 0, 0, 0, 0, 0, 41, 41, 41, 6, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 113, 208, 113 
 DB 41, 41, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 209, 208, 209, 41, 41, 41, 41, 0, 0, 0, 0, 41, 41, 41, 41, 209, 208, 209, 41, 41, 41, 41, 0, 0, 0, 0, 6, 41 
 DB 41, 41, 6, 6, 6, 41, 41, 41, 6, 0, 0, 0, 0, 22, 41, 41, 41, 41, 41, 41, 41, 41, 41, 22, 0, 0, 0, 0, 172, 138, 41, 41, 114, 113, 114, 41, 41, 138, 172, 0 
 DB 0, 20, 20, 173, 22, 41, 41, 41, 41, 41, 41, 41, 22, 173, 20, 0, 244, 244, 20, 174, 6, 41, 41, 41, 41, 41, 6, 174, 20, 244, 0, 244, 244, 244, 150, 161, 41, 41, 41, 41 
 DB 41, 161, 150, 244, 244, 0, 244, 244, 244, 244, 244, 6, 41, 41, 41, 6, 244, 244, 244, 244, 0, 244, 20, 137, 6, 6, 6, 41, 41, 41, 6, 6, 6, 137, 20, 0, 244, 20, 41, 41 
 DB 41, 41, 41, 41, 41, 41, 41, 41, 41, 20, 0, 244, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41 


img6 DB 27,27,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 40, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 136, 40, 41, 41, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 244, 20, 6, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 244, 244, 244, 244, 136, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 244, 244, 244, 244, 244, 6, 41, 41, 41, 41, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 244, 244, 244, 20, 20, 151, 137, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 147, 20, 244, 244, 20, 150, 22, 6, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 20, 244, 244, 161, 161, 41, 41, 41, 41, 41, 41 
 DB 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 0, 21, 20, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 138, 220, 114, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 162, 149, 20 
 DB 244, 136, 6, 41, 0, 0, 0, 0, 0, 20, 20, 16, 22, 6, 41, 41, 41, 41, 114, 114, 41, 41, 41, 41, 149, 150, 20, 244, 244, 20, 21, 0, 0, 0, 0, 244, 244, 244, 174, 22 
 DB 6, 41, 41, 41, 113, 208, 208, 6, 41, 41, 220, 20, 20, 244, 244, 244, 244, 16, 0, 0, 0, 244, 244, 244, 244, 175, 162, 41, 41, 41, 6, 209, 208, 209, 6, 41, 41, 20, 20, 244 
 DB 244, 244, 244, 124, 0, 0, 0, 244, 20, 20, 244, 20, 175, 6, 41, 41, 41, 41, 114, 113, 6, 41, 41, 41, 244, 20, 244, 244, 244, 124, 0, 0, 0, 244, 20, 20, 137, 20, 20, 161 
 DB 6, 41, 41, 114, 6, 41, 41, 41, 41, 41, 41, 0, 151, 244, 244, 104, 0, 0, 0, 0, 137, 6, 6, 41, 137, 20, 137, 41, 41, 41, 6, 114, 41, 41, 41, 41, 41, 41, 0, 0 
 DB 20, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 6, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41 
 DB 41, 41, 41, 41, 41, 41, 41, 6, 138, 161, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 6, 6, 161, 22, 172, 22, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 136, 21, 21, 150, 150, 150, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41 
 DB 41, 41, 41, 41, 6, 20, 20, 20, 20, 244, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 137, 20, 244, 244, 244, 16, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 6, 20, 20, 244, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 41, 41, 41, 137, 20, 244, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 137, 244, 21, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0


img7 DB 24,15,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 244, 244, 244, 244, 244, 244, 20, 0, 0, 0, 0, 0, 0, 0, 20 
 DB 244, 244, 244, 244, 244, 244, 0, 0, 41, 6, 20, 20, 244, 244, 244, 20, 0, 0, 0, 0, 0, 0, 0, 244, 244, 244, 244, 244, 244, 137, 40, 41, 41, 41, 41, 137, 244, 244, 20, 173 
 DB 172, 22, 6, 41, 41, 0, 0, 20, 244, 244, 244, 244, 244, 6, 41, 41, 41, 41, 41, 6, 244, 150, 174, 22, 138, 41, 41, 41, 41, 0, 0, 20, 244, 20, 20, 244, 244, 6, 41, 41 
 DB 41, 41, 41, 6, 244, 161, 6, 41, 41, 41, 41, 41, 41, 41, 41, 136, 220, 149, 173, 150, 244, 41, 41, 41, 41, 41, 41, 6, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41 
 DB 41, 41, 162, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 114, 41, 6, 209, 209, 113, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41 
 DB 113, 41, 6, 208, 208, 208, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 114, 41, 6, 209, 209, 113, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41 
 DB 41, 41, 41, 6, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 162, 6, 41, 41, 41, 41, 41, 41, 41, 6, 244, 161, 6, 41, 41, 41, 41, 41, 41, 41, 41, 136 
 DB 220, 150, 173, 149, 220, 41, 41, 41, 41, 41, 41, 6, 244, 150, 174, 22, 138, 41, 41, 41, 41, 0, 0, 20, 244, 20, 20, 20, 244, 6, 41, 41, 41, 41, 41, 137, 244, 244, 20, 173 
 DB 172, 22, 6, 41, 41, 0, 0, 20, 244, 244, 244, 244, 244, 6, 41, 41, 41, 6, 20, 20, 244, 244, 244, 20, 0, 0, 0, 0, 0, 0, 0, 244, 244, 244, 244, 244, 244, 136, 41, 41 


img8 DB 27,27,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 137, 244, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 6, 20, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 6, 20, 20, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 137 
 DB 20, 244, 244, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 137, 20, 244, 244, 244, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 6, 20, 20, 20, 244, 244, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 6, 137 
 DB 161, 175, 175, 174, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 6, 162, 22, 22, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 6, 136, 41, 41, 41 
 DB 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 137, 137, 6, 137, 20, 21, 6, 41, 41, 6, 114, 41, 41, 41, 41, 41, 41, 40, 0, 147, 20, 0 
 DB 0, 0, 0, 0, 0, 244, 20, 20, 20, 20, 21, 6, 41, 41, 114, 6, 41, 6, 41, 41, 41, 41, 0, 244, 20, 244, 244, 0, 0, 0, 0, 0, 21, 244, 20, 244, 20, 150, 161, 41 
 DB 41, 41, 41, 114, 209, 113, 41, 41, 41, 21, 20, 244, 244, 244, 244, 0, 0, 0, 0, 0, 20, 244, 244, 20, 150, 22, 6, 41, 41, 41, 113, 208, 208, 114, 41, 41, 20, 244, 244, 244 
 DB 244, 244, 20, 0, 0, 0, 0, 0, 21, 244, 244, 150, 172, 138, 41, 41, 41, 6, 209, 208, 114, 41, 41, 41, 244, 20, 20, 244, 244, 244, 244, 0, 0, 0, 0, 0, 16, 20, 16, 22 
 DB 161, 41, 41, 41, 41, 6, 6, 41, 41, 41, 41, 161, 150, 20, 244, 244, 20, 136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 161, 22 
 DB 151, 244, 136, 6, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 6, 137, 6, 41, 41, 41, 4, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 244, 20, 220, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 20, 20, 20, 149, 162, 6, 41, 41 
 DB 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 244, 244, 244, 20, 150, 149, 138, 41, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 244, 244, 244, 244, 20, 20, 220, 41, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 244, 244, 244, 244, 244, 114, 41 
 DB 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 124, 244, 244, 244, 136, 41, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 
 DB 0, 0, 0, 0, 0, 0, 0, 0, 124, 244, 20, 6, 41, 41, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 21, 41, 41 
 DB 41, 0, 0, 0, 0, 0, 0, 0, 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; width 30 ... height 31
player1_img DB 17, 16, 16, 184, 111, 4, 4, 4, 4, 110, 107, 128, 1, 128, 132, 134, 4, 4, 4, 4, 4, 110, 129, 151, 129, 17, 17, 17, 16, 17, 17, 17, 17, 16, 112, 4, 4, 4, 4, 110 
 DB 106, 105, 127, 128, 109, 136, 4, 4, 4, 4, 4, 110, 130, 151, 199, 16, 17, 16, 17, 17, 17, 17, 17, 16, 184, 111, 4, 4, 136, 110, 106, 105, 128, 129, 134, 136, 4, 4, 4, 4
 DB 110, 135, 153, 200, 16, 17, 17, 17, 16, 17, 17, 16, 16, 16, 16, 184, 111, 136, 134, 204, 105, 105, 128, 130, 135, 136, 4, 4, 4, 111, 135, 204, 202, 16, 16, 17, 16, 17, 17, 16
 DB 17, 17, 16, 17, 16, 16, 184, 182, 204, 202, 128, 128, 129, 134, 136, 136, 136, 136, 136, 136, 204, 204, 18, 17, 17, 17, 16, 16, 17, 16, 17, 17, 17, 17, 16, 17, 17, 17, 200, 224
 DB 128, 129, 135, 135, 136, 137, 137, 137, 137, 160, 134, 228, 17, 16, 16, 17, 17, 16, 17, 17, 17, 17, 16, 16, 17, 17, 16, 16, 17, 20, 21, 160, 136, 136, 137, 234, 210, 235, 209, 16
 DB 17, 235, 18, 16, 16, 16, 17, 16, 17, 16, 17, 16, 16, 17, 16, 16, 16, 17, 233, 20, 137, 137, 137, 161, 235, 16, 16, 16, 16, 16, 16, 209, 234, 233, 209, 18, 16, 16, 16, 17
 DB 17, 17, 16, 16, 16, 16, 185, 210, 137, 137, 137, 162, 24, 24, 210, 16, 17, 16, 16, 18, 211, 137, 137, 137, 137, 137, 137, 16, 16, 17, 16, 16, 17, 236, 138, 161, 136, 136, 137, 139
 DB 164, 65, 23, 209, 16, 17, 209, 210, 17, 235, 137, 138, 163, 164, 164, 23, 23, 138, 17, 17, 16, 211, 24, 27, 26, 24, 138, 136, 137, 164, 64, 66, 186, 16, 17, 17, 235, 20, 235, 137
 DB 138, 23, 24, 65, 65, 65, 65, 25, 210, 16, 210, 26, 66, 66, 24, 162, 138, 186, 186, 24, 65, 66, 187, 185, 209, 161, 26, 29, 162, 162, 164, 65, 65, 66, 89, 89, 66, 27, 137, 16
 DB 164, 66, 23, 163, 138, 138, 137, 185, 185, 164, 65, 65, 24, 211, 138, 28, 30, 30, 24, 164, 65, 65, 89, 90, 90, 90, 90, 27, 210, 16, 164, 162, 138, 138, 137, 23, 210, 185, 186, 210
 DB 164, 65, 65, 24, 26, 29, 24, 21, 163, 24, 65, 66, 66, 90, 90, 91, 90, 161, 16, 16, 138, 137, 137, 137, 162, 65, 186, 185, 186, 185, 137, 164, 23, 65, 26, 28, 22, 17, 209, 24
 DB 65, 65, 66, 89, 28, 24, 236, 16, 16, 17, 162, 138, 161, 163, 162, 138, 185, 185, 186, 210, 137, 138, 138, 162, 24, 25, 21, 18, 162, 23, 88, 137, 163, 26, 209, 16, 16, 16, 16, 17
 DB 186, 24, 65, 136, 113, 184, 184, 185, 137, 162, 138, 138, 139, 162, 24, 25, 173, 17, 185, 163, 24, 185, 160, 23, 17, 16, 17, 16, 17, 16, 16, 185, 208, 112, 112, 112, 112, 113, 136, 138
 DB 138, 161, 162, 162, 23, 26, 25, 24, 161, 162, 164, 234, 23, 21, 16, 16, 16, 16, 17, 17, 16, 185, 183, 112, 112, 112, 112, 112, 113, 136, 138, 161, 137, 136, 23, 25, 26, 24, 160, 163
 DB 162, 25, 25, 20, 16, 16, 16, 16, 16, 17, 16, 16, 183, 111, 112, 112, 112, 112, 112, 112, 113, 137, 136, 184, 208, 137, 235, 209, 186, 164, 137, 160, 162, 208, 16, 16, 16, 17, 16, 17
 DB 17, 16, 184, 113, 112, 4, 4, 4, 4, 4, 4, 113, 113, 184, 184, 184, 184, 184, 162, 23, 136, 184, 185, 185, 183, 184, 17, 16, 17, 17, 16, 17, 184, 113, 4, 4, 4, 4, 4, 4
 DB 4, 4, 4, 4, 112, 112, 113, 137, 164, 163, 136, 184, 184, 183, 111, 183, 185, 16, 16, 16, 17, 17, 16, 184, 113, 4, 4, 4, 4, 40, 40, 4, 40, 4, 4, 4, 4, 113, 113, 113
 DB 113, 112, 112, 112, 112, 112, 208, 185, 16, 16, 17, 17, 16, 184, 112, 4, 4, 40, 40, 40, 40, 40, 40, 40, 4, 4, 4, 4, 113, 4, 4, 4, 4, 4, 111, 111, 136, 184, 17, 16
 DB 17, 17, 16, 16, 184, 112, 4, 4, 40, 40, 40, 40, 40, 40, 40, 4, 64, 65, 64, 12, 12, 136, 4, 4, 4, 111, 183, 16, 16, 16, 16, 17, 17, 16, 16, 184, 4, 4, 40, 40
 DB 40, 40, 40, 40, 4, 12, 65, 64, 90, 90, 89, 64, 6, 4, 112, 184, 16, 16, 16, 16, 16, 17, 17, 17, 16, 184, 112, 4, 4, 40, 40, 40, 40, 40, 4, 64, 64, 137, 88, 65
 DB 64, 12, 4, 4, 184, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 16, 184, 112, 4, 4, 40, 39, 41, 41, 4, 12, 88, 160, 135, 136, 12, 12, 4, 111, 184, 16, 17, 16, 16, 16
 DB 17, 17, 17, 17, 17, 17, 16, 184, 112, 4, 4, 41, 12, 12, 12, 12, 63, 63, 88, 63, 12, 4, 113, 184, 16, 17, 16, 17, 17, 17, 17, 17, 16, 16, 16, 16, 17, 16, 184, 111
 DB 4, 4, 39, 12, 12, 41, 12, 12, 12, 12, 4, 113, 184, 16, 17, 17, 16, 16, 16, 17, 16, 16, 16, 16, 16, 16, 16, 17, 184, 184, 112, 4, 4, 4, 39, 4, 4, 4, 4, 4
 DB 4, 184, 184, 16, 17, 16, 17, 17, 17, 17

player2_img DB 42, 42, 6, 115, 6, 6, 42, 42, 42, 43, 43, 65, 159, 156, 24, 88, 63, 23, 140, 66, 14, 14, 43, 43, 43, 43, 42, 42, 6, 114, 42, 6, 6, 6, 42, 42, 42, 42, 43, 43
 DB 43, 66, 133, 156, 24, 157, 157, 137, 66, 66, 43, 6, 6, 6, 42, 42, 43, 42, 42, 6, 42, 6, 6, 6, 6, 42, 42, 43, 43, 43, 66, 65, 133, 5, 132, 133, 135, 65, 140, 116
 DB 115, 115, 115, 115, 115, 6, 6, 6, 140, 6, 42, 42, 6, 6, 6, 42, 43, 43, 43, 43, 66, 139, 132, 132, 132, 134, 64, 140, 115, 140, 140, 65, 65, 164, 140, 6, 115, 115, 137, 138
 DB 43, 43, 42, 42, 6, 42, 43, 43, 43, 43, 65, 137, 133, 132, 134, 160, 139, 140, 25, 66, 66, 67, 66, 66, 66, 65, 65, 65, 164, 138, 43, 14, 43, 43, 42, 43, 43, 43, 43, 66
 DB 163, 136, 135, 231, 136, 138, 139, 164, 66, 90, 89, 66, 66, 66, 65, 66, 66, 66, 66, 163, 43, 14, 14, 43, 43, 43, 14, 43, 43, 6, 114, 136, 160, 23, 24, 65, 27, 28, 28, 90
 DB 90, 89, 89, 66, 66, 65, 65, 65, 66, 186, 43, 43, 43, 14, 14, 14, 43, 43, 6, 115, 139, 25, 89, 89, 89, 90, 29, 29, 29, 30, 30, 29, 29, 29, 27, 24, 164, 164, 163, 16
 DB 116, 43, 43, 43, 43, 43, 43, 42, 115, 65, 89, 89, 26, 27, 29, 29, 29, 29, 29, 28, 26, 28, 28, 27, 25, 25, 24, 24, 185, 16, 17, 187, 140, 65, 66, 66, 65, 140, 164, 66
 DB 89, 139, 23, 26, 27, 25, 24, 27, 29, 23, 18, 24, 28, 26, 25, 24, 25, 208, 16, 16, 17, 16, 16, 186, 114, 187, 185, 114, 24, 25, 164, 185, 162, 25, 25, 22, 21, 28, 24, 17
 DB 16, 16, 22, 25, 23, 161, 135, 183, 16, 17, 17, 17, 16, 16, 16, 185, 187, 137, 164, 164, 138, 185, 17, 22, 22, 16, 16, 19, 17, 17, 185, 183, 208, 135, 135, 135, 160, 159, 208, 16
 DB 17, 16, 17, 16, 236, 24, 25, 164, 24, 164, 138, 185, 16, 16, 17, 17, 17, 17, 16, 208, 137, 135, 135, 134, 159, 12, 64, 157, 159, 16, 17, 16, 16, 211, 26, 90, 90, 138, 212, 163
 DB 211, 186, 210, 17, 16, 234, 235, 17, 210, 160, 157, 64, 12, 64, 64, 64, 64, 64, 160, 16, 16, 17, 16, 236, 90, 67, 66, 188, 186, 187, 187, 24, 28, 139, 139, 28, 25, 162, 25, 22
 DB 64, 63, 63, 63, 63, 63, 63, 64, 207, 16, 16, 16, 16, 164, 66, 66, 26, 187, 187, 187, 139, 66, 66, 67, 90, 90, 90, 27, 26, 24, 23, 64, 64, 63, 63, 63, 64, 158, 16, 16
 DB 17, 16, 138, 66, 65, 140, 139, 115, 212, 138, 139, 25, 66, 67, 28, 26, 26, 27, 25, 24, 158, 22, 158, 23, 23, 23, 159, 183, 16, 17, 17, 17, 26, 66, 139, 139, 164, 66, 187, 186
 DB 140, 25, 65, 26, 24, 23, 26, 25, 25, 25, 235, 234, 209, 161, 210, 235, 18, 16, 17, 17, 17, 186, 66, 140, 164, 66, 66, 140, 186, 187, 114, 24, 65, 212, 16, 226, 24, 26, 26, 26
 DB 25, 18, 17, 162, 18, 21, 19, 16, 17, 16, 17, 210, 24, 65, 90, 65, 139, 114, 187, 114, 115, 24, 65, 210, 16, 16, 16, 19, 21, 22, 18, 16, 138, 163, 210, 18, 18, 16, 16, 17
 DB 17, 209, 26, 25, 139, 114, 114, 114, 114, 114, 115, 140, 65, 139, 211, 23, 25, 26, 28, 28, 28, 27, 26, 24, 162, 17, 17, 20, 243, 17, 17, 16, 17, 16, 185, 139, 115, 115, 115, 115
 DB 115, 115, 139, 65, 90, 90, 67, 67, 67, 66, 66, 66, 66, 67, 67, 27, 26, 26, 23, 16, 17, 16, 16, 16, 16, 211, 140, 6, 6, 6, 6, 6, 6, 6, 140, 140, 6, 42, 42, 42
 DB 65, 65, 65, 65, 65, 26, 24, 20, 17, 16, 17, 17, 17, 17, 16, 16, 187, 140, 65, 42, 42, 42, 42, 42, 42, 42, 6, 42, 42, 6, 65, 26, 24, 26, 23, 24, 186, 16, 16, 17
 DB 17, 17, 16, 17, 17, 16, 16, 16, 114, 140, 43, 42, 42, 42, 42, 43, 43, 43, 42, 140, 25, 161, 20, 24, 211, 162, 209, 16, 17, 17, 17, 16, 16, 17, 17, 16, 16, 16, 16, 17
 DB 115, 65, 43, 43, 43, 43, 43, 43, 66, 26, 138, 23, 24, 225, 24, 138, 17, 16, 16, 17, 17, 16, 16, 17, 17, 17, 17, 17, 17, 16, 16, 187, 6, 43, 43, 43, 14, 14, 14, 140
 DB 139, 26, 26, 163, 25, 210, 16, 17, 17, 17, 17, 16, 17, 17, 17, 17, 17, 16, 17, 16, 16, 16, 185, 139, 65, 43, 43, 14, 14, 66, 43, 65, 140, 140, 164, 17, 17, 17, 17, 16
 DB 17, 17, 17, 17, 17, 17, 16, 17, 17, 16, 17, 16, 16, 16, 186, 116, 140, 43, 14, 14, 14, 43, 65, 140, 186, 16, 16, 16, 17, 17, 17, 16, 16, 17, 17, 17, 16, 17, 16, 17
 DB 17, 16, 17, 17, 16, 16, 17, 187, 115, 139, 139, 139, 188, 17, 16, 17, 16, 17, 16, 17, 17, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 16, 16, 16, 16
 DB 16, 16, 16, 17, 16, 17, 16, 16, 17, 17
;;;;;;;;;;;;;;;;;;;; player1_colorsages used in the game ;;;;;;;;;;;;;;;;;;;;;


winner_messege db '  Wins ! $ '
Draw_message db 'Game is draw $'

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Track Data ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


x_initial dw ?
TrackWidth EQU 50
x_final dw ?
y_final dw ?
backgroundColor db 34
Game_time dw 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Obstacles Data ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

X_of_obstacles_arr dw ?,?,?,?,?,?
Y_of_obstacles_arr dw ?,?,?,?,?,?

obstacle1x dw ?
obstacle1y dw ?
obstacle_1 dw 100 dup(?)

obstacle2x dw ?
obstacle2y dw ?
obstacle_2 dw 100 dup(?)

obstacle3x dw ?
obstacle3y dw ?
obstacle_3 dw 100 dup(?)

obstacle4x dw ?
obstacle4y dw ?
obstacle_4 dw 100 dup(?)

obstacle5x dw ?
obstacle5y dw ?
obstacle_5 dw 100 dup(?)

obstacle6x dw ?
obstacle6y dw ?
obstacle_6 dw 100 dup(?)


 
curr_obstacle_x DW  ?
curr_obstacle_y DW  ?

obstacle_num dw 0
curr_obstacle dw ?

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Power_ups Data ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

X_of_power_ups_arr dw ?,?,?,?,?,?
Y_of_power_ups_arr dw ?,?,?,?,?,?

 power1x dw ?
 power1y dw ?
 power_up_1 dw 50 dup(?)

 power2x dw ?
 power2y dw ?
 power_up_2 dw 50 dup(?)

 power3x dw ?
 power3y dw ?
 power_up_3 dw 50 dup(?)

 power4x dw ?
 power4y dw ?
 power_up_4 dw 50 dup(?)

 power5x dw ?
 power5y dw ?
 power_up_5 dw 50 dup(?)

 power6x dw ?
 power6y dw ?
 power_up_6 dw 50 dup(?)

 curr_power_up_x DW  ?
 curr_power_up_y DW  ?

 power_up_num dw 0
 curr_Power dw ?

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Car One Data ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

car_one_width  dw 27
car_one_height dw 27

car_one_old_x              DW 100   ;initial x =  final line range 
car_one_old_y              DW 170   ;initial y =  final line range

curr_car_one_y              DW 170
curr_car_one_x              DW 100

car1_buffer DB 27,27, 27 dup(27 dup(?))  ; used to save the area under car1 before we draw the car over it

equalSign db '=0$'
Score_CarOne db 48 ,'$'

 point1_CarOne_x dw ?   ;the top left of the car for to compare with the powerUps color to choose if to remove or to stay
 point2_CarOne_x dw ?   ; middle ..
 point3_CarOne_x dw ?   ; Top right .. 
 
 point1_CarOne_y dw ?
 point2_CarOne_y dw ?
 point3_CarOne_y dw ?



car_one_mode  dw 3
car_one_color db 0

red_car_color              db ?
black_car_color            db ?

car_one_speed db 0
car_one_max_speed db 2
car_one_min_speed db 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Car Two Data ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

car_two_width  dw 27
car_two_height dw 27

car_two_old_x              DW 100
car_two_old_y              DW 150

car_two_x              DW 100
car_two_y              DW 150

car2_buffer DB 27,27, 27 dup(27 dup(?))  ; used to save the area under car2 beore we draw the car over it

Score_CarTwo db 48 ,'$'

 point1_CarTwo_x dw ?   ;the top left of the car for to compare with the powerUps color to choose if to remove or to stay
 point2_CarTwo_x dw ?   ; middle ..
 point3_CarTwo_x dw ?   ; Top right .. 
 
 point1_CarTwo_y dw ?
 point2_CarTwo_y dw ?
 point3_CarTwo_y dw ?

car_two_mode  dw 3
car_two_color db 2


car_two_speed db 0
car_two_max_speed db 2
car_two_min_speed db 0

;------------------------------------------------------
.CODE
;------------------------------------------------------
MAIN    PROC FAR
MOV AX,@DATA
MOV DS,AX
    
    call defineNames

    C1:clearScreen
    ; Draw main Screen 
        setCursor 10,12,0
        showMes messege1
        setCursor 12,12,0
        showMes messege2
        setCursor 14,12,0
        showMes messege3
        setCursor 22,0,0
        showMes breakLine

        mov al,isWaitChatRespons
        cmp al,1 
        jne mainScr  
        setCursor 23,0,0            
        showMes sendChat 
        showMes player2[2]

    ;; check if we received an action 
    mainScr:

    ; check received data   if( f1  &&    isWaitChatRespons==1 ) 
    ;     isWaitChatRespons =0
    ;     move to chatt mode  
    ;     clear row 23

    ; check received data   if( f2  &&    isWaitGameRespons==1 ) 
    ;     isWaitGameRespons =0      
    ;     move to chatt mode  
    ;     clear row 24 

    ; if (esc )  
    ; jmp hlt1 


    
    ;;or we want to make action ( send or accept invitation )   
    checkbuffer 
        jz mainScr  ; if no key is pressed 

    readChar 
    cmp ah ,3bH  ;; f1 for chatting     F1 = 3bh    &&  F5=   3fh
        je chat
    cmp ah ,3cH  ;; f2 for gaming
        je game    
    cmp al,1bh   ;; esc for exit
        je hlt1
    jmp mainScr      
    chat: 
        mov bl ,isWaitChatRespons   ;; accept invitation so move to chat mode 
        cmp bl,1 
            je gotoChat

        setCursor 23,0,0            ;; send invitaion
        showMes sendChat 
        showMes player2[2]
        mov isWaitChatRespons ,1 
        jmp mainScr

        gotoChat: 
            mov isWaitChatRespons ,0 
            call chatMode
            jmp mainScr
    game:               
        mov bl,isWaitGameRespons    ;; accept invitation so move to chat mode 
        cmp bl ,1 
            je gotoGameMode

        setCursor 24,0,0 
        showMes sendPlay 
        showMes player2[2]
        mov isWaitGameRespons ,1 
        jmp mainScr 

        gotoGameMode: 
            mov isWaitGameRespons,0 
            call gameMode
            jmp c1

hlt1: clearScreen 
mov ah,4ch
int 21h 
MAIN    ENDP
;-----------------------------------------------------------------
defineNames proc
    ;;   read player 1 name
        clearScreen
        setCursor 10,12,0
        showMes mes1
        fix11:
            clearRow 11 
            setCursor 11,12,0
            readStr player1
    ;; CHECK SIZE
        mov al, player1[1]
        cmp al ,15
        jbe lbl1

        clearRow 12
        setCursor 12,12,0
        showMes mes5
        jmp fix11 
    ;;   check if first char is letter
    lbl1:    mov al ,player1[2]
        cmp al ,65
             jb notallowed
        cmp al ,122
             ja notallowed
        cmp al ,97
              jb check
        jmp continue

        check:
            cmp al ,90
            ja notallowed
            jmp continue


        notallowed:
            clearRow 12
            setCursor 12,12,0
            showMes mes4
            jmp fix11

        continue:
        clearRow 12
        setCursor 12,12,0
        showMes mes2
        readChar
    ;;  read player2 name
        clearScreen
        setCursor 10,12,0
        showMes mes3
        fix22: 
            clearRow 11
            setCursor 11,12,0
            readStr player2


    ;; CHECK SIZE
        mov al, player2[1]
        cmp al ,15
        jbe lbl2

        clearRow 12
        setCursor 12,12,0
        showMes mes5
        jmp fix22 
    ;;   check if first char is letter
       lbl2: mov al ,player2[2]
        cmp al ,65
            jb notallowed2
        cmp al ,122
            ja notallowed2
        cmp al ,97
            jb check2

        jmp continue2
        check2:
        cmp al ,90
        ja notallowed2
        jmp continue2

        notallowed2:
        clearRow 12
        setCursor 12,12,0
        showMes mes4
        jmp fix22

        continue2:
        clearRow 12
        setCursor 12,12,0
        showMes mes2
        readChar
    ret
defineNames endp
;--------------------------------------------------
chatMode proc 
    changePage 1 
    clearScreen
    showMes cmes1  
    setCursor 23,0,1 
    showMes breakLine 
    showMes endChat

    lp1:
    checkbuffer
    jnz checkChat
    JMP LP1

    checkChat:  
        readChar
        cmp ah,3dh  ; scan code of f3 
        je endChatLabel
    jmp lp1
    endChatLabel: 
    changePage 0
    clearRow 23
    ret
chatMode endp 

;---------------------- The Logic of the Game is HERE   -----------------------------------
gameMode proc
    changePage 2 
    mov ax, 13h   ; 320*200 graphics mode
    INT 10h      	;execute the configuration


    call Draw_Track
    call fill_cars_buffers
    call Draw_car_one
    call Draw_car_Two

    ; lp2:
    ; checkbuffer
    ; jnz CheckGameBuffer
    ; JMP LP2

    ; CheckGameBuffer:  
    ;     readChar
    ;     cmp ah,3eh  ; scan code of f4 
    ;     je endGameLabel
    ; jmp lp2





;;;;;;;;;;;;;;;;; intialize score
jmp mainloop

changeMode: 
      mov ah,0 
      int 16h
      cmp ah , 72
            je UP
       cmp ah , 80
            je Down      
      cmp ah, 77  ; right arrow
            je right 
      cmp ah , 75 ; left arrow
            je left
      cmp ah ,32  ; D char 
            je D
      cmp ah ,30  ; a char 
            je A 
      cmp ah, 3eh ; scan code of f4 To Exit Game 
            je temp_Label_game_ended1  
                
      jmp mainloop
      right: 
            mov ax ,car_one_mode 
            cmp ax,8
            je   fix1
            inc ax 
            mov car_one_mode,aX  
            jmp mainloop 
      left: 
            mov aX ,car_one_mode 
            cmp ax , 1
            je  fix2
            dec ax 
            mov car_one_mode,ax  
            jmp mainloop 
      D: 
            mov ax ,car_two_mode 
            cmp ax,8
            je fix3
            inc ax
            mov car_two_mode,ax  
            jmp mainloop 
      A: 
            mov ax,car_two_mode
            cmp ax,1 
            je fix4
            dec ax 
            mov car_two_mode,ax  
            jmp mainloop
      UP:
            inc car_one_speed           
            mov al , car_one_speed
            cmp al , car_one_max_speed
            jg fix_up
            jmp mainloop
      Down:
            dec car_one_speed
            mov al , car_one_speed
            cmp al , 0ffh
            je fix_down
            jmp mainloop           

      temp_Label_game_ended1:
            jmp temp_Label_game_ended2

      temp_label_change_mode:
            jmp changeMode
      fix1: 
      mov car_one_mode,1
      jmp mainloop
      fix2:
      mov car_one_mode,8
      jmp mainloop
      fix3: 
      mov car_two_mode ,1
      jmp mainloop
      fix4: 
      mov car_two_mode,8
      jmp mainloop
      
      fix_down:      
      mov al , car_one_min_speed
      mov car_one_speed , al
      jmp mainloop

      fix_up:
      mov al , car_one_max_speed
      mov car_one_speed , al
      jmp mainloop

      ; jmp strt1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
mainloop: 
      mov ah , 1
      int 16h
      jnz  temp_label_change_mode

mov bx ,car_one_mode 

cmp bx,1
      je strt1
cmp bx,2
      je strt2
cmp bx,3
      je strt3
cmp bx,4
      je strt4
cmp bx,5
      je strt5
cmp bx,6
      je strt6
cmp bx,7
      je strt7
cmp bx,8
      je strt8

temp_Label_game_ended2:
jmp game_ended
strt1: 
mov ah , 1 
call mode1
jmp end1

strt2: 
mov ah , 1 
call mode2
jmp end1

strt3: 
mov ah , 1 
call mode3
jmp end1

strt4: 
mov ah , 1 
call mode4
jmp end1

strt5: 
mov ah , 1 
call mode5
jmp end1

strt6: 
mov ah , 1 
call mode6
jmp end1

strt7: 
mov ah , 1 
call mode7
jmp end1

strt8: 
mov ah , 1 
call mode8
jmp end1

end1:
mov bx ,car_two_mode
cmp bx,1
      je sstrt1
cmp bx,2
      je sstrt2
cmp bx,3
      je sstrt3
cmp bx,4
      je sstrt4
cmp bx,5
      je sstrt5
cmp bx,6
      je sstrt6
cmp bx,7
      je sstrt7
cmp bx,8
      je sstrt8 

sstrt1: 
      mov ah , 2 
      call mode1
      jmp end2

sstrt2: 
      mov ah , 2 
      call mode2
      jmp end2

sstrt3: 
      mov ah , 2 
      call mode3
      jmp end2

sstrt4: 
      mov ah , 2 
      call mode4
      jmp end2

sstrt5: 
      mov ah , 2 
      call mode5
      jmp end2

sstrt6: 
      mov ah , 2 
      call mode6
      jmp end2

sstrt7: 
      mov ah , 2 
      call mode7
      jmp end2

sstrt8: 
      mov ah ,2 
      call mode8
      jmp end2

end2:

call erase_cars
call collect_power_up
call collect_obstacles
call fill_cars_buffers
call Draw_car_one
call Draw_car_Two

;; delay
mov cx , 0fffbh
loooop1:
loop loooop1

; inc Game_time
; mov cx,Game_time
; cmp cx,850
; jz game_ended
; jmp mainloop

call IsGameOver
cmp bh, 1
jz game_ended
jmp mainloop


;;;; if game time finished ;;;;;;
game_ended: 
mov ax,0           ; set game time to zero again in order if f2 pressed start the game 
mov Game_time,ax
call who_win

;------------- restart the configurations -----------
    mov ax,0
    mov obstacle_num,ax
    mov power_up_num,ax
    
    ;----------car One --------
    mov ax,110
    mov car_one_old_x,ax
    mov curr_car_one_x,ax
    mov ax,170 
    mov car_one_old_y,ax
    mov curr_car_one_y,ax 
    mov ax, 27
    mov car_one_width, ax
    mov car_one_height, ax       

    ;----------Car Two -----------
    mov ax,30
    mov car_two_old_x ,ax
    mov car_two_x,ax
    mov ax,170
    mov car_two_old_y ,ax
    mov car_two_y,ax
    mov ax, 27
    mov car_two_width, ax
    mov car_two_height, ax  

    ;-----------Scores----------
    mov ah,48
    mov Score_CarOne,ah
    mov Score_CarTwo,ah
    ;------------mode------------
    mov ax,3
    mov car_one_mode,ax
    mov car_two_mode,ax
;-----------------------------------------------------

endloop:  
    checkbuffer
    JZ endloop 
    readChar 
    CMP AH,3EH 
    JE endGameLabel

jmp endloop

    endGameLabel:  
    MOV AL,03    ;;   CHANGE TO TEXT MODE 
    MOV AH,0 
    INT 10H 
    changePage 0
    clearRow   24
    ret
gameMode endp

; ------------------ Game Proceduers -------------
;----------Is game over?-----------
IsGameOver          proc
            jmp fun
            game_over1:
            mov bh , 1h
            add Score_CarOne, 5
            ret
            game_over2:
            mov bh , 1h
            add Score_CarTwo, 5
            ret

fun:        mov bh , 00h
            mov ah ,0DH
            mov cx, point1_CarOne_x
            mov dx, point1_CarOne_y
            int 10H
            cmp al, 00 ; final line color
            jz game_over1
            mov cx, point2_CarOne_x
            mov dx, point2_CarOne_y
            int 10H
            cmp al, 00 ; final line color
            jz game_over1
            mov cx, point3_CarOne_x
            mov dx, point3_CarOne_y
            int 10H
            cmp al, 00 ; final line color
            jz game_over1

            mov cx, point1_CarTwo_x
            mov dx, point1_CarTwo_y
            int 10H
            cmp al, 00 ; final line color
            jz game_over2
            mov cx, point2_CarTwo_x
            mov dx, point2_CarTwo_y
            int 10H
            cmp al, 00 ; final line color
            jz game_over2
            mov cx, point3_CarTwo_x
            mov dx, point3_CarTwo_y
            int 10H
            cmp al, 00 ; final line color
            jz game_over2
            ret

IsGameOver          endp

Mode1               PROC 

      cmp ah , 1 
      jne m1_case2
      mov ah ,0DH

      mov bl, red_car_color
      sub bl, car_one_color
      add bl, car_two_color
      mov bh, black_car_color
      sub bh, car_one_color
      add bh, car_two_color

      mov cx, curr_car_one_x
      mov dx, curr_car_one_y
      mov point1_CarOne_x,cx
      mov point2_CarOne_x,cx
      add point2_CarOne_x,7
      dec dx
      mov point1_CarOne_y, dx
      mov point2_CarOne_y, dx
      int 10H
      cmp al, backgroundColor
      jz return1
      cmp al, bl
      jz return1
      cmp al, bh
      jz return1
      add cx,15
      mov point3_CarOne_x,cx
      mov point3_CarOne_y,dx
      int 10H
      cmp al, backgroundColor
      jz return1
      cmp al, bl
      jz return1
      cmp al, bh
      jz return1
      mov cx, point2_CarOne_x
      mov dx, point2_CarOne_y
      int 10h
      cmp al, bl
      jz return1
      cmp al, bh
      jz return1
      mov al , car_one_speed
      mov ah , 0
      sub curr_car_one_y , ax   
      return1:ret
      ; second car
      m1_case2:
      mov ah ,0DH
      mov cx, car_two_x
      mov point1_CarTwo_x,cx
      mov point2_CarTwo_x,cx
      add point2_CarTwo_x,7

      dec dx
      mov dx, car_two_y
      mov point1_CarTwo_y, dx
      mov point2_CarTwo_y, dx
      int 10H
      cmp al, backgroundColor
      jz return1
      cmp al, red_car_color
      jz return1
      cmp al, black_car_color
      jz return1
      add cx,15
      mov point3_CarTwo_x,cx
      mov point3_CarTwo_y,dx
      int 10H
      cmp al, backgroundColor
      jz return1
      cmp al, red_car_color
      jz return1
      cmp al, black_car_color
      jz return1
      mov cx, point2_CarTwo_x
      mov dx, point2_CarTwo_y
      int 10h
      cmp al, red_car_color
      jz return1
      cmp al, black_car_color
      jz return1
      dec car_two_y                
      ret 
Mode1               ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Mode2               PROC 
      cmp ah , 1 
      je poof
      jmp m2_case2
poof: mov ah ,0DH
      mov cx, curr_car_one_x
      mov dx, curr_car_one_y

      mov bl, red_car_color
      sub bl, car_one_color
      add bl, car_two_color
      mov bh, black_car_color
      sub bh, car_one_color
      add bh, car_two_color
      
      inc cx
      add cx, 22
      mov point1_CarOne_x,cx
      mov point1_CarOne_y,dx

      mov point2_CarOne_x,cx
      add point2_CarOne_x,2
      mov point2_CarOne_y,dx
      add point2_CarOne_y,2
      dec dx
      int 10H
      cmp al, backgroundColor
      jz return2
      cmp al, bl
      jz return2
      cmp al, bh
      jz return2
      add cx, 5
      mov point3_CarOne_x,cx
      add dx, 5
      mov point3_CarOne_y,dx
      int 10H
      cmp al, backgroundColor
      jz return2
      cmp al, bl
      jz return2
      cmp al, bh
      jz return2
      mov cx, point2_CarOne_x
      mov dx, point2_CarOne_y
      int 10h
      cmp al, bl
      jz return2
      cmp al, bh
      jz return2
      mov ah , 0
      mov al , car_one_speed
      sub curr_car_one_y , ax
      add curr_car_one_x , ax
      return2:ret
      m2_case2:
      mov ah ,0DH
      mov cx, car_two_x
      mov dx, car_two_y
      inc cx
      add cx, 22
      mov point1_CarTwo_x,cx
      mov point1_CarTwo_y,dx

      mov point2_CarTwo_x,cx
      add point2_CarTwo_x,2
      mov point2_CarTwo_y,dx
      add point2_CarTwo_y,2
      dec dx
      int 10H
      cmp al, backgroundColor
      jz return2
      cmp al, red_car_color
      jz return2
      cmp al, black_car_color
      jz return2
      add cx, 5
      mov point3_CarTwo_x,cx
      add dx, 5
      mov point3_CarTwo_y,cx
      int 10H
      cmp al, backgroundColor
      jz return2
      cmp al, red_car_color
      jz return2
      cmp al, black_car_color
      jz return2
      mov cx, point2_CarTwo_x
      mov dx, point2_CarTwo_y
      int 10h
      cmp al, red_car_color
      jz return2
      cmp al, black_car_color
      jz return2
      dec car_two_y
      inc car_two_x               
      ret 
Mode2               ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Mode3               PROC 
      cmp ah , 1 
      je foop
      jmp m3_case2
foop: mov ah ,0DH
      ;for collision - hint:this code must be in initial mode
      mov cx, car_one_old_x
      mov dx, car_one_old_y
      add cx, 24
      sub cx, 3
      add dx, 3
      int 10h
      mov red_car_color, al
      sub cx, 5
      sub dx, 2
      int 10h
      mov black_car_color, al

      ;;;;;;;;;;;;;;;;;;;;;
      mov cx, curr_car_one_x
      add cx, 24
      mov dx, curr_car_one_y

      mov bl, red_car_color
      sub bl, car_one_color
      add bl, car_two_color
      mov bh, black_car_color
      sub bh, car_one_color
      add bh, car_two_color


      mov point1_CarOne_x,cx
      mov point2_CarOne_x,cx
      mov point3_CarOne_x,cx
      mov point1_CarOne_y,dx
      mov point2_CarOne_y,dx
      add point2_CarOne_y,7
      inc cx
      int 10H
      cmp al, backgroundColor
      jz return3
      cmp al, bl
      jz return3
      cmp al, bh
      jz return3
      add dx, 15
      mov point3_CarOne_y,dx
      int 10H
      cmp al, backgroundColor
      jz return3
      cmp al, bl
      jz return3
      cmp al, bh
      jz return3
      mov cx, point2_CarOne_x
      mov dx, point2_CarOne_y
      int 10h
      cmp al, bl
      jz return3
      cmp al, bh
      jz return3
      mov ah , 0
      mov al , car_one_speed
      add curr_car_one_x , ax
      return3:ret
      m3_case2:
      mov ah ,0DH
      mov cx, car_two_x
      add cx, 24
      mov dx, car_two_y

      mov point1_CarTwo_x,cx
      mov point2_CarTwo_x,cx
      mov point3_CarTwo_x,cx
      mov point1_CarTwo_y,dx
      mov point2_CarTwo_y,dx
      add point2_CarTwo_y,7
      inc cx
      int 10H
      cmp al, backgroundColor
      jz return3
      cmp al, red_car_color
      jz return3
      cmp al, black_car_color
      jz return3
      add dx, 15
      mov point3_CarTwo_y,dx
      int 10H
      cmp al, backgroundColor
      jz return3
      cmp al, red_car_color
      jz return3
      cmp al, black_car_color
      jz return3
      mov cx, point2_CarTwo_x
      mov dx, point2_CarTwo_y
      int 10h
      cmp al, red_car_color
      jz return3
      cmp al, black_car_color
      jz return3
      inc car_two_x              
      ret 
Mode3               ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Mode4               PROC 
      cmp ah , 1
      je blah 
      jmp m4_case2
blah: mov ah ,0DH

      mov bl, red_car_color
      sub bl, car_one_color
      add bl, car_two_color
      mov bh, black_car_color
      sub bh, car_one_color
      add bh, car_two_color

      mov cx, curr_car_one_x
      add cx, 22
      mov point1_CarOne_x,cx
      add point1_CarOne_x,27
      mov point3_CarOne_x,cx
      mov point2_CarOne_x,cx
      add point2_CarOne_x,2
      mov dx, curr_car_one_y
      mov point1_CarOne_y,dx
      add point1_CarOne_y,22
      add dx, 27
      mov point3_CarOne_y,dx
      mov point2_CarOne_y,dx
      sub point2_CarOne_y,2
      inc cx
      inc dx
      int 10H
      cmp al, backgroundColor
      jz return4
      cmp al, bl
      jz return4
      cmp al, bh
      jz return4
      mov cx, curr_car_one_x
      add cx, 27
      mov dx, curr_car_one_y
      add dx, 22
      inc cx
      inc dx
      int 10H
      cmp al, backgroundColor
      jz return4
      cmp al, bl
      jz return4
      cmp al, bh
      jz return4
      mov cx, point2_CarOne_x
      mov dx, point2_CarOne_y
      int 10h
      cmp al, bl
      jz return4
      cmp al, bh
      jz return4
      mov ah , 0
      mov al , car_one_speed
      add curr_car_one_x , ax
      add curr_car_one_y , ax
      return4:ret

      m4_case2:
      mov ah ,0DH
      mov cx, car_two_x
      add cx, 22
      mov point3_CarTwo_x,cx
      mov point2_CarTwo_x,cx
      add point2_CarTwo_x,2
      mov dx, car_two_y
      add dx, 27
      mov point3_CarTwo_y,dx
      mov point2_CarTwo_y,dx
      sub point2_CarTwo_y,2
      inc cx
      inc dx
      int 10H
      cmp al, backgroundColor
      jz return4
      cmp al, red_car_color
      jz return4
      cmp al, black_car_color
      jz return4
      mov cx, car_two_x
      add cx, 27
      mov point1_CarTwo_x,cx
      mov dx, car_two_y
      add dx, 22
      mov point1_CarTwo_y,cx
      inc cx
      inc dx
      int 10H
      cmp al, backgroundColor
      jz return4
      cmp al, red_car_color
      jz return4
      cmp al, black_car_color
      jz return4
      mov cx, point2_CarTwo_x
      mov dx, point2_CarTwo_y
      int 10h
      cmp al, red_car_color
      jz return4
      cmp al, black_car_color
      jz return41
      inc car_two_x
      inc car_two_y             
      return41:ret 
Mode4               ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Mode5               PROC 
      cmp ah , 1 
      jne lll
      mov ah ,0DH

      mov bl, red_car_color
      sub bl, car_one_color
      add bl, car_two_color
      mov bh, black_car_color
      sub bh, car_one_color
      add bh, car_two_color

      mov cx, curr_car_one_x
      mov dx, curr_car_one_y
      add dx, 24
      mov point1_CarOne_x,Cx
      mov point2_CarOne_x,cx
      add point2_CarOne_x,7
      mov point1_CarOne_y,DX
      mov point2_CarOne_y,DX
      mov point3_CarOne_y,DX
      jmp lll2
      lll:
      jmp m5_case2
      lll2:

      inc dx
      int 10H
      cmp al, backgroundColor
      jz return5
      cmp al, bl
      jz return5
      cmp al, bh
      jz return5
      add cx, 15
      mov point3_CarOne_x,CX
      int 10H
      cmp al, backgroundColor
      jz return5
      cmp al, bl
      jz return5
      cmp al, bh
      jz return5
      mov cx, point2_CarOne_x
      mov dx, point2_CarOne_y
      int 10h
      cmp al, bl
      jz return5
      cmp al, bh
      jz return5
      mov ah , 0
      mov al , car_one_speed
      add curr_car_one_y , ax
      return5:ret

      m5_case2:
      mov ah ,0DH
      mov cx, car_two_x
      mov dx, car_two_y
      add dx, 24
      mov point1_CarTwo_x,Cx
      mov point2_CarTwo_x,cx
      add point2_CarTwo_x,7
      mov point1_CarTwo_y,DX
      mov point2_CarTwo_y,DX
      mov point3_CarTwo_y,DX
      inc dx
      int 10H
      cmp al, backgroundColor
      jz return5
      cmp al, red_car_color
      jz return5
      cmp al, black_car_color
      jz return5
      add cx, 15
      mov point3_CarTwo_x,CX
      int 10H
      cmp al, backgroundColor
      jz return5
      cmp al, red_car_color
      jz return5
      cmp al, black_car_color
      jz return5
      mov cx, point2_CarTwo_x
      mov dx, point2_CarTwo_y
      int 10h
      cmp al, red_car_color
      jz return5
      cmp al, black_car_color
      jz return5
      inc car_two_y           
      ret 
Mode5               ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Mode6               PROC 
      cmp ah , 1 
      je bla
      jmp m6_case2
bla:  mov ah ,0DH

      mov bl, red_car_color
      sub bl, car_one_color
      add bl, car_two_color
      mov bh, black_car_color
      sub bh, car_one_color
      add bh, car_two_color

      mov cx, curr_car_one_x
      mov point2_CarOne_x,cx
      add point2_CarOne_x,2
      mov point3_CarOne_x,cx
      add cx, 5
      mov point1_CarOne_x,cx
      mov dx, curr_car_one_y
      mov point2_CarOne_y,dx
      add point2_CarOne_y,22
      mov point3_CarOne_y,dx
      add point3_CarOne_y,22
      add point3_CarOne_y,2
      add dx, 27
      mov point1_CarOne_y,dx
      inc dx
      dec cx
      int 10H
      cmp al, backgroundColor
      jz return6
      cmp al, bl
      jz return6
      cmp al, bh
      jz return6
      mov cx, curr_car_one_x
      mov dx, curr_car_one_y
      add dx, 22
      inc dx
      dec cx
      int 10H
      cmp al, backgroundColor
      jz return6
      cmp al, bl
      jz return6
      cmp al, bh
      jz return6
      mov cx, point2_CarOne_x
      mov dx, point2_CarOne_y
      int 10h
      cmp al, bl
      jz return6
      cmp al, bh
      jz return6
      mov ah , 0
      mov al , car_one_speed
      sub curr_car_one_x , ax   
      add curr_car_one_y , ax
      return6:ret

      m6_case2:
      mov ah ,0DH
      mov cx, car_two_x
      add cx, 5
      mov point1_CarTwo_x,cx
      mov dx, car_two_y
      add dx, 27
      mov point1_CarTwo_y,dx
      inc dx
      dec cx
      int 10H
      cmp al, backgroundColor
      jz return6
      cmp al, red_car_color
      jz return6
      cmp al, black_car_color
      jz return6
      mov cx, car_two_x
      mov point2_CarTwo_x,cx
      add point2_CarTwo_x,2
      mov point3_CarTwo_x,cx
      mov dx, car_two_y
      add dx, 22
      mov point2_CarTwo_y,dx
      mov point3_CarTwo_y,dx
      add point3_CarTwo_y,2
      inc dx
      dec cx
      int 10H
      cmp al, backgroundColor
      jz return6
      cmp al, red_car_color
      jz return6
      cmp al, black_car_color
      jz return6
      mov cx, point2_CarTwo_x
      mov dx, point2_CarTwo_y
      int 10h
      cmp al, red_car_color
      jz return6
      cmp al, black_car_color
      jz return6
      dec car_two_x       
      inc car_two_y        
      ret 
Mode6               ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Mode7               PROC 
      cmp ah , 1 
      jne m7_case2
      mov ah, 0DH

      mov bl, red_car_color
      sub bl, car_one_color
      add bl, car_two_color
      mov bh, black_car_color
      sub bh, car_one_color
      add bh, car_two_color

      mov cx, curr_car_one_x
      mov point1_CarOne_x,CX
      mov point2_CarOne_x,cx
      mov point3_CarOne_x,cx
      mov dx, curr_car_one_y
      mov point1_CarOne_y,dx
      mov point2_CarOne_y,dx
      add point2_CarOne_y,7
      dec cx
      int 10H
      cmp al, backgroundColor
      jz return7
      cmp al, bl
      jz return7
      cmp al, bh
      jz return7
      add dx, 15
      mov point3_CarOne_y,dx
      int 10H
      cmp al, backgroundColor
      jz return7
      cmp al, bl
      jz return7
      cmp al, bh
      jz return7
      mov cx, point2_CarOne_x
      mov dx, point2_CarOne_y
      int 10h
      cmp al, bl
      jz return7
      cmp al, bh
      jz return7
      mov ah , 0
      mov al , car_one_speed
      sub curr_car_one_x , ax
      return7:ret

      m7_case2:
      mov ah, 0DH
      mov cx, car_two_x
      mov point1_CarTwo_x,CX
      mov point2_CarTwo_x,cx
      mov point3_CarTwo_x,cx
      mov dx, car_two_y
      mov point1_CarTwo_y,dx
      mov point2_CarTwo_y,dx
      add point2_CarTwo_y,7
      dec cx
      int 10H
      cmp al, backgroundColor
      jz return7
      cmp al, red_car_color
      jz return7
      cmp al, black_car_color
      jz return7
      add dx, 15
      mov point3_CarTwo_y,dx
      int 10H
      cmp al, backgroundColor
      jz return7
      cmp al, red_car_color
      jz return7
      cmp al, black_car_color
      jz return7
      mov cx, point2_CarTwo_x
      mov dx, point2_CarTwo_y
      int 10h
      cmp al, red_car_color
      jz return7
      cmp al, black_car_color
      jz return7
      dec car_two_x      
      ret 
Mode7               ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Mode8               PROC 
      cmp ah , 1 
      je foo
      jmp m8_case2
foo:  mov ah, 0DH

      mov bl, red_car_color
      sub bl, car_one_color
      add bl, car_two_color
      mov bh, black_car_color
      sub bh, car_one_color
      add bh, car_two_color

      mov cx, curr_car_one_x
      mov dx, curr_car_one_y
      mov point3_CarOne_x,cx
      mov point1_CarOne_y,dx
      mov point2_CarOne_y,dx
      add point2_CarOne_y,2
      dec dx
      dec cx
      add cx, 5
      mov point1_CarOne_x,cx
      mov point2_CarOne_x,cx
      sub point2_CarOne_x,2
      int 10H
      cmp al, backgroundColor
      jz return8
      cmp al, bl
      jz return8
      cmp al, bh
      jz return8
      mov cx, curr_car_one_x
      mov dx, curr_car_one_y
      dec dx
      dec cx
      add dx, 5
      mov point3_CarOne_y,dx
      int 10H
      cmp al, backgroundColor
      jz return8
      cmp al, bl
      jz return8
      cmp al, bh
      jz return8
      mov cx, point2_CarOne_x
      mov dx, point2_CarOne_y
      int 10h
      cmp al, bl
      jz return8
      cmp al, bh
      jz return8
      mov ah , 0
      mov al , car_one_speed
      sub curr_car_one_x ,ax
      sub curr_car_one_y , ax
      return8:ret

      m8_case2:
      mov ah, 0DH
      mov cx, car_two_x
      mov dx, car_two_y
      mov point3_CarTwo_x,cx
      mov point1_CarTwo_y,dx
      mov point2_CarTwo_y,dx
      add point2_CarTwo_y,2
      dec dx
      dec cx
      add cx, 5
      mov point1_CarTwo_x,cx
      mov point2_CarTwo_x,cx
      sub point2_CarTwo_x,2
      int 10H
      cmp al, backgroundColor
      jz return8
      cmp al, red_car_color
      jz return8
      cmp al, black_car_color
      jz return8
      mov cx, car_two_x
      mov dx, car_two_y
      dec dx
      dec cx
      add dx, 5
      mov point3_CarTwo_y,dx
      int 10H
      cmp al, backgroundColor
      jz return8
      cmp al, red_car_color
      jz return8
      cmp al, black_car_color
      jz return8
      mov cx, point2_CarTwo_x
      mov dx, point2_CarTwo_y
      int 10h
      cmp al, red_car_color
      jz return8
      cmp al, black_car_color
      jz return8
      dec car_two_x 
      dec car_two_y
     
      ret 
Mode8               ENDP

;----------------------------------------------------------
;----------------------------------------------------------
;----------------------------------------------------------
;----------------------------------------------------------
;----------------------------------------------------------




;-----------------------------------------
;it erase the car given X, Y in top left
;bh --> counter for horizontal
;bl --> counter for virtical

Erase               PROC
;    mov ax , 0600h
; 	mov bh , 00h
; 	mov cx ,0
; 	mov dx , 184fh
; 	int 10h
RET
ENDP
;---------------------------------------------'

Draw_car_one       PROC    

       cmp car_one_mode , 1
             je m1
       cmp car_one_mode , 2
             je m2
       cmp car_one_mode , 3
             je m3
       cmp car_one_mode , 4
             je m4
       cmp car_one_mode , 5
             je m5
       cmp car_one_mode , 6
             je m6
       cmp car_one_mode , 7
             je m7
       cmp car_one_mode , 8
             je m8

       m1:
         mov di,offset img1
         jmp st
       m2:
         mov di,offset img2
         jmp st
       m3:
         mov di,offset img3
         jmp st
       m4:
         mov di,offset img4
         jmp st
       m5:
         mov di,offset img5
         jmp st
       m6:
         mov di,offset img6
         jmp st
       m7:
         mov di,offset img7
         jmp st
       m8:
         mov di,offset img8
         jmp st



        st:      MOV AH,0Bh        	;set the configuration
              mov ah , 0
              mov al , [DI]
              mov car_one_width , ax
	       MOV CX, car_one_width     	;set the width (X) up to 64 (based on image resolution)
              inc DI
              mov al , [DI]
              mov car_one_height , AX
	       MOV DX, car_one_height     	;set the hieght (Y) up to 64 (based on image resolution)
              inc DI
	       jmp Start    	;Avoid drawing before the calculations
	Drawit:

              add cx, curr_car_one_x
              add dx , curr_car_one_y
              MOV AH,0Ch   	;set the configuration to writing a pixel
              mov al, [DI]     ; color of the current coordinates
              add al , car_one_color
              cmp al , car_one_color
              je a1
              MOV BH,00h   	;set the page number
              INT 10h      	;execute the configuration
              a1:
              sub cx , curr_car_one_x
              sub dx , curr_car_one_y
	Start: 
		inc DI
	       DEC Cx         	;  loop iteration in x direction
	       JNZ Drawit      	;  check if we can draw c urrent x and y and excape the y iteration
	       mov Cx, car_one_width 	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	       DEC DX 	      	;  loop iteration in y direction
	       JZ  ENDING   	;  both x and y reached 00 so end program
		Jmp Drawit


ENDING: ret
 ENDP



Draw_car_Two       PROC  two
       cmp car_two_mode , 1
             je mm1
       cmp car_two_mode , 2
             je mm2
       cmp car_two_mode , 3
             je mm3
       cmp car_two_mode , 4
             je mm4
       cmp car_two_mode , 5
             je mm5
       cmp car_two_mode , 6
             je mm6
       cmp car_two_mode , 7
             je mm7
       cmp car_two_mode , 8
             je mm8

       mm1:
         mov di,offset img1
         jmp st2
       mm2:
         mov di,offset img2
         jmp st2
       mm3:
         mov di,offset img3
         jmp st2
       mm4:
         mov di,offset img4
         jmp st2
       mm5:
         mov di,offset img5
         jmp st2
       mm6:
         mov di,offset img6
         jmp st2
       mm7:
         mov di,offset img7
         jmp st2
       mm8:
         mov di,offset img8
         jmp st2



        st2:      MOV AH,0Bh        	;set the configuration
              mov ah , 0
              mov al , [DI]
            mov car_two_width , ax
	       MOV CX, car_two_width     	;set the width (X) up to 64 (based on image resolution)
              inc DI
              mov al , [DI]
              mov car_two_height , AX
	       MOV DX, car_two_height     	;set the hieght (Y) up to 64 (based on image resolution)
              inc DI
	       jmp Start2    	;Avoid drawing before the calculations
	Drawit2:

              add cx, car_two_x
              add dx , car_two_y
              MOV AH,0Ch   	;set the configuration to writing a pixel
              mov al, [DI]     ; color of the current coordinates
              add al , car_two_color
              cmp al , car_two_color
              je a2
              MOV BH,00h   	;set the page number
              INT 10h      	;execute the configuration
              a2:
              sub cx , car_two_x
              sub dx , car_two_y
	Start2: 
		inc DI
	       DEC Cx         	;  loop iteration in x direction
	       JNZ Drawit2      	;  check if we can draw c urrent x and y and excape the y iteration
	       mov Cx, car_two_width 	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	       DEC DX 	      	;  loop iteration in y direction
	       JZ  ENDING2   	;  both x and y reached 00 so end program
		Jmp Drawit2

ENDING2: ret
 ENDP

fill_cars_buffers proc

            mov di , offset car1_buffer
            ;;;;;;;;;;
            mov ax , car_one_width            
            mov [DI] , al
            inc DI
            mov ax , car_one_height
            mov [DI] , al
            inc DI
            mov cx , car_one_width
            mov dx , car_one_height
            jmp start_fill1
            ;;;;;;;;
            
	fill1:

            add cx , curr_car_one_x
            add dx , curr_car_one_y                    
            ;;;;;;;;;;;;;;;; get color here 
            mov ah , 0DH
            mov bh, 0
            int 10h
            mov [DI] , al
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
            sub cx , curr_car_one_x
            sub dx , curr_car_one_y
 
	start_fill1:

		inc DI
	      DEC Cx         	;  loop iteration in x direction
	      JNZ fill1      	;  check if we can draw c urrent x and y and excape the y iteration
	      mov Cx, car_one_width 	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	      DEC DX 	      	;  loop iteration in y direction
	      JZ  ENDING1   	;  both x and y reached 00 so end program
		Jmp fill1

ENDING1:
            mov di , offset car2_buffer
            ;;;;;;;;;;
            mov ax , car_two_width            
            mov [DI] , al
            inc DI
            mov ax , car_two_height
            mov [DI] , al
            inc DI
            mov cx , car_two_width
            mov dx , car_two_height
            jmp start_fill2
            
	fill2:

            add cx , car_two_x
            add dx , car_two_y           
            ;;;;;;;;;;;;;;;; get color here 
            mov ah , 0DH
            mov bh, 0
            int 10h
            mov [DI] , al
            ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

            sub cx , car_two_x
            sub dx , car_two_y

	start_fill2:

		inc DI
	      DEC Cx         	;  loop iteration in x direction
	      JNZ fill2      	;  check if we can draw c urrent x and y and excape the y iteration
	      mov Cx, car_two_width 	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	      DEC DX 	      	;  loop iteration in y direction
	      JZ  ENDINGG2  	;  both x and y reached 00 so end program
		Jmp fill2

ENDINGG2: ret

fill_cars_buffers ENDP



erase_cars PROC

mov di , offset car1_buffer


   MOV AH,0Bh        	;set the configuration
             mov ah , 0
             mov al , [DI]
             mov car_one_width , ax
	       MOV CX, car_one_width     	;set the width (X) up to 64 (based on image resolution)
             inc DI
             mov al , [DI]
             mov car_one_height , AX
	       MOV DX, car_one_height     	;set the hieght (Y) up to 64 (based on image resolution)
             inc DI
	      jmp Start_erase1    	;Avoid drawing before the calculations
	eraseit1:
            add cx, car_one_old_x
            add dx , car_one_old_y
            MOV AH,0Ch   	;set the configuration to writing a pixel
            mov al, [DI]     ; color of the current coordinates
            MOV BH,00h   	;set the page number
            INT 10h      	;execute the configuration
            sub cx , car_one_old_x
            sub dx , car_one_old_y
	Start_erase1: 
		inc DI
	      DEC Cx         	;  loop iteration in x direction
	      JNZ eraseit1      	;  check if we can draw c urrent x and y and excape the y iteration
	      mov Cx, car_one_width 	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	      DEC DX 	      	;  loop iteration in y direction
	      JZ ENDING_erase1   	;  both x and y reached 00 so end program
		Jmp eraseit1


ENDING_erase1:

mov dx , curr_car_one_x
mov car_one_old_x , dx
mov dx , curr_car_one_y
mov car_one_old_y , dx


mov di , offset car2_buffer


   MOV AH,0Bh        	;set the configuration
             mov ah , 0
             mov al , [DI]
             mov car_two_width , ax
	       MOV CX, car_two_width     	;set the width (X) up to 64 (based on image resolution)
             inc DI
             mov al , [DI]
             mov car_two_height , AX
	       MOV DX, car_two_height     	;set the hieght (Y) up to 64 (based on image resolution)
             inc DI
	      jmp Start_erase2    	;Avoid drawing before the calculations
	eraseit2:
            add cx, car_two_old_x
            add dx , car_two_old_y
            MOV AH,0Ch   	;set the configuration to writing a pixel
            mov al, [DI]     ; color of the current coordinates
            MOV BH,00h   	;set the page number
            INT 10h      	;execute the configuration
            sub cx , car_two_old_x
            sub dx , car_two_old_y
	Start_erase2: 
		inc DI
	      DEC Cx         	;  loop iteration in x direction
	      JNZ eraseit2      	;  check if we can draw c urrent x and y and excape the y iteration
	      mov Cx, car_two_width 	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	      DEC DX 	      	;  loop iteration in y direction
	      JZ ENDING_erase2   	;  both x and y reached 00 so end program
		Jmp eraseit2


ENDING_erase2:

mov dx , car_two_x
mov car_two_old_x , dx
mov dx , car_two_y
mov car_two_old_y , dx



ret

erase_cars ENDP



;--------------------- Track , obstcales, powerUps Procedures ----------------------
Draw_Track PROC 
    ;Change to graphics mode
    mov ah,0
    mov al,13h
    INT 10H
    ; fill the background with color 34
    Fill_background backgroundColor  ; calling the macro responsible for fill the backg with specific color 

    set_indices 5,55,55,195,07        ;from (5,55) to (55,195) width 50 height 140
    call Draw_rect 
    set_indices 55,55,115,105,07    
    call Draw_rect 
    set_indices 95,5,145,105,07
    call Draw_rect
    set_indices 145,5,265,55,07
    call Draw_rect
    set_indices 265,5,315,100,07   
    call Draw_rect
    set_indices 160,100,315,150,07  
    call Draw_rect
    set_indices 160,150,210,195,07  
    call Draw_rect
    set_indices 55,145,160,195,07  
    call Draw_rect
    ;------------Dotted Line ------------
     set_indices 30,80,115,80,0FH 
     call Dotted_line
     set_indices 120,30,295,30,0FH 
     call Dotted_line
     set_indices 30,170,185,170,0FH 
     call Dotted_line      
     set_indices 185,125,295,125,0FH 
     call Dotted_line
     set_indices 30,85,30,170,0FH 
     call Dotted_lineY
     set_indices 120,30,120,85,0FH 
     call Dotted_lineY
     set_indices 185,125,185,170,0FH 
     call Dotted_lineY
     set_indices 295,30,295,125,0FH 
     call Dotted_lineY
    ;-------------Final Line--------------
    set_indices 100,145,103,155,00 
    call Final_lineBlack
    set_indices 103,145,106,155,0fh 
    call Final_lineBlack
    set_indices 106,145,109,155,00 
    call Final_lineBlack
    set_indices 100,155,103,165,0fh 
    call Final_lineBlack
    set_indices 103,155,106,165,00 
    call Final_lineBlack
    set_indices 106,155,109,165,0fh 
    call Final_lineBlack
    set_indices 100,165,103,175,00 
    call Final_lineBlack
    set_indices 103,165,106,175,0fh 
    call Final_lineBlack
    set_indices 106,165,109,175,00 
    call Final_lineBlack
    set_indices 100,175,103,185,0fh 
    call Final_lineBlack
    set_indices 103,175,106,185,00 
    call Final_lineBlack
    set_indices 106,175,109,185,0fh 
    call Final_lineBlack
    set_indices 100,185,103,195,00 
    call Final_lineBlack
    set_indices 103,185,106,195,0fh
    call Final_lineBlack
    set_indices 106,185,109,195,00 
    call Final_lineBlack
;--------------------------------


  call Create_ObstaclesX 
   mov DI,offset X_of_obstacles_arr
   mov SI, offset Y_of_obstacles_arr
   mov curr_obstacle , DI

   mov bx,0
   drawfourObstacles:
   mov DI , curr_obstacle
	call Valid_Position
	call draw_obstacle
   mov dx,bx
   inc dx
   mov DI , curr_obstacle
   inc DI
   mov curr_obstacle , DI
   inc SI
   mov bx,dx
   cmp bx,6
   jnz drawfourObstacles


   call CreatePowers

   mov DI,offset X_of_power_ups_arr
   mov curr_Power ,DI

   mov SI, offset Y_of_power_ups_arr
   mov bx,0
   drawPowers:

   mov DI , curr_Power
   call Valid_Position


   call draw_powers
   mov dx,bx
   mov DI,curr_Power

   inc dx
   inc DI
   mov curr_Power ,DI
   
   inc SI
   mov bx,dx
   cmp bx,6
   jnz drawPowers

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Draw Player 1 at index 5,5
	       MOV CX, 30  	;set the width (X) up to 64 (based on image resolution)
	       MOV DX, 31 	;set the hieght (Y) up to 64 (based on image resolution)
		 mov DI, offset player1_img  ; to iterate over the pixels
	       jmp Drawplayer    	;Avoid drawing before the calculations
	Drawplayer:
	       MOV AH,0Ch   	;set the configuration to writing a pixel
             mov al, [DI]     ; color of the current coordinates
	       MOV BH,00h   	;set the page number
	       INT 10h      	;execute the configuration
	Startplayer: 
		 inc DI
	       DEC Cx       	;  loop iteration in x direction
	       JNZ Drawplayer      	;  check if we can draw c urrent x and y and excape the y iteration
	       mov Cx, 30 	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	       DEC DX       	;  loop iteration in y direction
	       JZ  ENDINGPlayer 	;  both x and y reached 00 so end program
		Jmp Drawplayer
ENDINGPlayer:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Draw Player 2
	       MOV CX, 75  	;set the width (X) up to 64 (based on image resolution)
	       MOV DX, 31 	;set the hieght (Y) up to 64 (based on image resolution)
		 mov DI, offset player2_img  ; to iterate over the pixels
	       jmp Drawplayer2    	;Avoid drawing before the calculations
	Drawplayer2:
	       MOV AH,0Ch   	;set the configuration to writing a pixel
             mov al, [DI]     ; color of the current coordinates
	       MOV BH,00h   	;set the page number
	       INT 10h      	;execute the configuration
	Startplayer2: 
		 inc DI
	       DEC Cx       	;  loop iteration in x direction
             cmp cx,45
	       Jg Drawplayer2      	;  check if we can draw c urrent x and y and excape the y iteration
	       mov Cx, 75 	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	       DEC DX       	;  loop iteration in y direction
	       JZ  ENDINGPlayer2 	;  both x and y reached 00 so end program
		Jmp Drawplayer2
ENDINGPlayer2:
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;-------- players & status bar --------
   setCursor 4,6,0    ; player 2
   showMes player2[2]

   mov ah,player2[1]
;    add ah,6
;    setCursor 3,ah,0
;    showMes equalSign

   setCursor 4,0,0     ; player 1 
   showMes player1[2]
;    mov ah,player1[1]
;    add ah,6
;    setCursor 4,ah,0
;    showMes equalSign
   
   setCursor 22,70,0    ; exit Game Mes 
   showMes endGame
;---------------------------------------
        
ret

Draw_Track ENDP
;------------------- Helper procedures for drawing track ---------------------
Draw_rect proc                            ; draw line Up given initial x , y position and x,y finals
    mov ah,0ch 
    ; Draw column by column
    DrawLine: int 10h
        inc dx
        cmp dx,y_final     
        jnz DrawLine
    ; increment cx 
        mov dx,bx                         ; bx is a container for the y initial
        inc cx 
        cmp cx,x_final
        jnz DrawLine
ret
Draw_rect endp
Final_lineBlack proc                      ; proc to draw the final line 
                                          ; will draw the final line starting drom x=100 till 103
     	                                    ; strating from y=145 till y=195  --> the width of the track   
	
	DrawFinalline:
	       MOV AH,0Ch   	            ;set the configuration to writing a pixel
	       INT 10h      	            ;execute the configuration
	StartDrawing: 
	       inc Cx       	            ;  loop iteration in x direction
           cmp cx,x_final
	       JNZ DrawFinalline      	;  check if we can draw c urrent x and y and excape the y iteration
	       mov Cx, x_initial 	      ;  if loop iteration in y direction, then x should start over so that we sweep the grid
	       inc DX       	            ;  loop iteration in y direction
           cmp dx,y_final
           jnz DrawFinalline
ret
Final_lineBlack endp
Dotted_line proc                 ; proc to draw the final line 
                     ; will draw the final line starting drom x=100 till 103
     	            ; strating from y=145 till y=195  --> the width of the track   
	
	DrawitD:
	       MOV AH,0Ch   	;set the configuration to writing a pixel
	       INT 10h      	;execute the configuration
           inc CX
           cmp CX,x_final
           jz StartD
           MOV AH,0Ch   	;set the configuration to writing a pixel
	       INT 10h      	;execute the configuration
           inc CX
           cmp CX,x_final
           jz StartD
           MOV AH,0Ch   	;set the configuration to writing a pixel
	       INT 10h  
	StartD: 
	       add Cx ,5      	;  loop iteration in x direction
           cmp cx,x_final
	       Jl DrawitD      	;  check if we can draw c urrent x and y and excape the y iteration
ret
Dotted_line endp

Dotted_lineY proc                 ; proc to draw the final line 
                     ; will draw the final line starting drom x=100 till 103
     	            ; strating from y=145 till y=195  --> the width of the track   
	
	DrawitDY:
	       MOV AH,0Ch   	;set the configuration to writing a pixel
	       INT 10h      	;execute the configuration
           inc DX
           cmp DX,y_final
           jz StartDY
           MOV AH,0Ch   	;set the configuration to writing a pixel
	       INT 10h      	;execute the configuration
           inc DX
           cmp DX,y_final
           jz StartDY
           MOV AH,0Ch   	;set the configuration to writing a pixel
	       INT 10h  
	StartDY: 
	       add DX ,5      	;  loop iteration in x direction
           cmp Dx,y_final
	       Jl DrawitDY      	;  check if we can draw c urrent x and y and excape the y iteration
ret
Dotted_lineY endp
;---------------------------------------------------------------------------------

Create_ObstaclesX proc

   MOV AH, 00h       
   INT 1AH           

   mov  ax, dx
   xor  dx, dx
   mov  cx, 256
   div  cx                                      ; here dx contains the remainder of the division 

   add  dl, '0'  
   add al,'0'

   ; create the four x positions of the obstacles
   mov DI,offset X_of_obstacles_arr
   mov [DI],dl
   inc DI
   mov [DI],al
   add dl,30
   inc DI
   mov [DI],dl
   inc DI
   sub al,80
   mov [DI],al
   inc DI
   sub al,6
   mov [DI],al
   inc DI
   sub al,25
   mov [DI],al

   call Create_ObstaclesY
ret
Create_ObstaclesX ENDP
;;;;;;;;;;;;;;;;;;;;;;;;
Create_ObstaclesY proc
   MOV AH, 00h                                    ; interrupts to get system time        
   INT 1AH                                        ; CX:DX now hold number of clock ticks since midnight      

   mov  ax, dx
   xor  dx, dx
   mov  cx, 320
   div  cx                                        ; here dx contains the remainder of the division 

   add  dl, '0'    
   add al,  '0'

  ; create the four x positions of the obstacles
   mov DI,offset Y_of_obstacles_arr
   mov [DI],dl
   inc DI
   mov [DI],al
   sub dl,10
   inc DI
   mov [DI],dl
   inc DI
   sub al,10
   mov [DI],al
   inc DI
   sub al,13
   mov [DI],al
   inc DI
   add al,9
   mov [DI],al
ret
Create_ObstaclesY ENDP
;;;;;;;;;;;;;;;;;;;;;;
Valid_Position proc

   ; check that x position isn't greater than 305
   mov cx,[DI]
   cmp cx,305
   jG change
   ; check the color of thr  pixel
   ;cx,dx
   mov ah,0DH
   mov dx,[SI]
   int 10h
   cmp al,34
   jz change
   cmp al,00
   jz change
   cmp al,12
   jz change
   ;cx+10,dx
   mov ah,0DH
   mov cx,[DI]
   add cx,10
   mov dx,[SI]
   int 10h
   cmp al,34
   jz change
   cmp al,00
   jz change
   cmp al,12
   jz change

   ;cx+10,dx+10
   mov ah,0DH
   MOV CX,[DI]
   add cx,10
   mov dx,[SI]
   add dx,10
   int 10h
   cmp al,34
   jz change
   cmp al,00
   jz change
   cmp al,12
   jz change
   ;cx,dx+10
   mov ah,0DH
   mov cx,[DI]
   mov dx,[SI]
   add dx,10
   int 10h
   cmp al,34
   jz change
   cmp al,00
   jz change
   cmp al,12
   jz change
   ret
   change: call Change_Coordinates

ret
Valid_Position ENDP
;;;;;;;;;;;;;;;;;;;;;;;
Change_Coordinates proc
lop1:
  mov ax, [DI]
  add ax,20
  mov [DI],ax
  mov ax,[SI]
  add ax,10
  mov [SI],ax

   mov ah,0DH
   mov cx,[DI]

   mov dx,[SI]
   int 10h
   cmp al,34
   jz lop1
   cmp al,00
   jz lop1
   cmp al,12
   jz lop1
   Call Valid_Position
ret
Change_Coordinates ENDP
;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Draw_obstacle proc  ;obstacles are drawn in red

;____fill buffers____


mov cx,[DI]
MOV curr_obstacle_x,cx

mov dx,[SI]
mov curr_obstacle_y , dx

INC obstacle_num 
call fill_obstacle_buffers

;__________________

mov DI, curr_obstacle
mov cx,[DI]
add cx,10
mov dx,[SI]
add dx,10

mov al,8       ;add 8 to the obstacle to chanage the color
mov ah,0ch
add ax , obstacle_num
draw1: int 10h
draw_Lenght:int 10h
  dec dx
  cmp dx,[SI]
  jnz draw_Lenght
dec cx
mov dx,[SI]
add dx,10
cmp cx,[DI]
jnz Draw1

ret
Draw_obstacle ENDP
;;;;;;;;;;;;;;;;;;
CreatePowers proc
mov DI,offset X_of_power_ups_arr
mov SI, offset Y_of_power_ups_arr

   MOV AH, 00h  ; interrupts to get system time        
   INT 1AH      ; CX:DX now hold number of clock ticks since midnight      

   mov  ax, dx
   xor  dx, dx
   mov  cx, 320
   div  cx       ; here dx contains the remainder of the division 

   add  dl, '0'    
   add al,  '0'

  ; create the four x positions of the obstacles
   mov dx,X_of_obstacles_arr[0]
   add dx,7
   mov [DI],dx
   inc DI
   mov dx,Y_of_obstacles_arr[0]
   add dx,13
   mov [SI],dx
   INC SI

   mov dx,X_of_obstacles_arr[1]
   sub dx,19
   mov [DI],dx
   inc DI
   mov dx,Y_of_obstacles_arr[1]
   add dx,23
   mov [SI],dx
   INC SI

   mov dx,X_of_obstacles_arr[2]
   sub dx,33
   mov [DI],dx
   inc DI
   mov dx,Y_of_obstacles_arr[2]
   add dx,27
   mov [SI],dx
   INC SI

   mov dx,X_of_obstacles_arr[3]
   sub dx,62
   mov [DI],dx

   mov dx,Y_of_obstacles_arr[3]
   sub dx,39
   mov [SI],dx

   mov dx,X_of_obstacles_arr[4]
   sub dx,43
   mov [DI],dx
   inc DI
   mov dx,Y_of_obstacles_arr[4]
   add dx,14
   mov [SI],dx
   INC SI

   mov dx,X_of_obstacles_arr[5]
   sub dx,24
   mov [DI],dx
   inc DI
   mov dx,Y_of_obstacles_arr[5]
   add dx,29
   mov [SI],dx
   INC SI

   mov dx,X_of_obstacles_arr[6]
   sub dx,11
   mov [DI],dx
   inc DI
   mov dx,Y_of_obstacles_arr[6]
   add dx,5
   mov [SI],dx
   INC SI

ret
CreatePowers ENDP
;;;;;;;;;;;;;;;;;;;;;;
draw_powers proc  ;obstacles are drawn in red

;____fill buffers____



mov cx,[DI]
MOV curr_power_up_x,cx


mov dx,[SI]
mov curr_power_up_y , dx

INC power_up_num 
call fill_power_up_buffers

;_____________
mov DI , curr_Power
mov cx,[DI]
add cx,5
mov dx,[SI]

mov al,bl
add al,45                  ; to help detect which power to remove if 11 --> power one ,, if 12 power two and so on based on the color
mov ah,0ch
drawP: int 10h
  dec cx
  inc dx
  cmp cx,[DI]
  jnz drawP

add cx,5
drawL: int 10h
  dec cx
  cmp cx,[DI]
  jnz drawL
add cx,5
drawP_Lenght:int 10h
  dec cx
  inc dx
  cmp cx,[DI]
  jnz drawP_Lenght

ret
draw_powers ENDP
;----------------------------Fill Power Ups Procedures -----------------------------------------------

fill_power_up_buffers proc

           
            mov cx , 0       ; width of powrup =5
            mov dx , 0       ; height of powrup=10


            cmp power_up_num , 1
                    je go1
            cmp power_up_num , 2
                    je go2
            cmp power_up_num , 3
                    je go3
            cmp power_up_num , 4
                    je go4
            cmp power_up_num , 5
                    je go5
            cmp power_up_num , 6
                    je go6

            go1:
                  mov DI , offset power_up_1
                  mov ax,curr_power_up_x
                  mov power1x,ax

                   mov ax,curr_power_up_y
                  mov power1y,ax

                  jmp anything
            go2:
                  mov di , offset power_up_2
                  mov ax,curr_power_up_x
                  mov power2x,ax

                   mov ax,curr_power_up_y
                  mov power2y,ax
                  jmp anything
            go3:
                  mov di , offset power_up_3   
                  mov ax,curr_power_up_x
                  mov power3x,ax

                  mov ax,curr_power_up_y
                  mov power3y,ax
                  jmp anything
            go4:
                  mov di , offset power_up_4   
                  mov ax,curr_power_up_x
                  mov power4x,ax

                  mov ax,curr_power_up_y
                  mov power4y,ax
                  jmp anything
            go5:
                  mov di , offset power_up_5   
                  mov ax,curr_power_up_x
                  mov power5x,ax

                  mov ax,curr_power_up_y
                  mov power5y,ax
                  jmp anything
            go6:
                  mov di , offset power_up_6  
                  mov ax,curr_power_up_x
                  mov power6x,ax

                  mov ax,curr_power_up_y
                  mov power6y,ax 
                  jmp anything                                             
           anything:


           jmp star
            
	filll1:

            add cx , curr_power_up_x
            add dx , curr_power_up_y

            ;)) get color here ((;
            mov ah , 0DH
            mov bh, 0
            int 10h
            mov ah,0
            mov [DI] , al
            ;______________________

            sub cx , curr_power_up_x
            sub dx , curr_power_up_y

            inc cx
            inc di


	star:

                              ;  loop iteration in x direction
            cmp CX,6          ; compare cx with the width of the power ups+1
	      JNZ filll1      	;  check if we can draw current x and y and excape the y iteration
	      mov Cx, 0 	      ; if loop iteration in y direction, then x should start over so that we sweep the grid
	      inc DX 	      ; loop iteration in y direction
            cmp dx,11         ; compare dx with the height of the powerUp+1
	      JZ  ENDINGG1   	;  both x and y reached 00 so end program
		Jmp filll1

ENDINGG1: ret

fill_power_up_buffers ENDP
;---------------------------------------------------------------------------------
;-------------------Erase Power Ups Procedures ----------------------------------
erase_power_ups PROC

             

            
	      MOV CX, 0    	;set the width (X) up to 64 (based on image resolution)
	      MOV DX, 0     	;set the hieght (Y) up to 64 (based on image resolution)
            cmp power_up_num , 45
                    je er1
            cmp power_up_num , 46
                    je er2
            cmp power_up_num , 47
                    je er3
            cmp power_up_num , 48
                    je er4
            cmp power_up_num , 49
                    je er5
            cmp power_up_num , 50
                    je er6

            er1:
                  mov DI , offset power_up_1
                  mov ax,power1x
                  mov curr_power_up_x,ax

                   mov ax,power1y
                  mov curr_power_up_y,ax

                  jmp erase_power_up
            er2:
                  mov di , offset power_up_2
                  mov ax,power2x
                  mov curr_power_up_x,ax

                  mov ax,power2y
                  mov curr_power_up_y,ax

                  jmp erase_power_up
            er3:
                  mov di , offset power_up_3   
                  mov ax,power3x
                  mov curr_power_up_x,ax

                  mov ax,power3y
                  mov curr_power_up_y,ax
                  jmp erase_power_up
            er4:
                  mov di , offset power_up_4   
                  mov ax,power4x
                  mov curr_power_up_x,ax

                  mov ax,power4y
                  mov curr_power_up_y,ax
                  jmp erase_power_up  
            er5:
                  mov di , offset power_up_5   
                  mov ax,power5x
                  mov curr_power_up_x,ax

                  mov ax,power5y
                  mov curr_power_up_y,ax 
                  jmp erase_power_up 
            er6:
                  mov di , offset power_up_6   
                  mov ax,power6x
                  mov curr_power_up_x,ax

                  mov ax,power6y
                  mov curr_power_up_y,ax  
                  jmp erase_power_up                                              

	erase_power_up:
            add cx,  curr_power_up_x
            add dx , curr_power_up_y
            MOV AH,0Ch   	;set the configuration to writing a pixel
            mov al, [DI]    ; color of the current coordinates
            MOV BH,00h   	;set the page number
            INT 10h      	;execute the configuration
            sub cx , curr_power_up_x
            sub dx , curr_power_up_y
            inc di
            inc cx
	Start_erase_powerup: 
		
	               	
            cmp cx,6                     ; compare with the width of the poweups+1
	      JNZ erase_power_up           ;  check if we can draw c urrent x and y and excape the y iteration
	      mov Cx, 0 	                 ;  if loop iteration in y direction, then x should start over so that we sweep the grid
	      inc DX 	      	     ;  loop iteration in y direction
            cmp dx,11                    ; compare with the height of the powerUps+1
	      JZ ENDING_erase_power_ups   	;  both x and y reached 00 so end program
		Jmp erase_power_up

ENDING_erase_power_ups:

ret

erase_power_ups ENDP
;---------------------------------------------------------------
;----------------- Collect Power Ups Procedures ----------------

collect_power_up PROC  

            mov ah , 0DH
            mov bh, 0
            mov cx , point1_CarOne_x
            mov dx , point1_CarOne_y
            int 10h

            cmp al ,45
            jz remove
            cmp al ,46
            jz remove
            cmp al ,47
            jz remove
            cmp al ,48
            jz remove
            cmp al ,49
            jz remove
            cmp al ,50
            jz remove

            mov cx , point2_CarOne_x
            mov dx , point2_CarOne_y
            int 10h

            cmp al ,45
            jz remove
            cmp al ,46
            jz remove
            cmp al ,47
            jz remove 
            cmp al ,48
            jz remove
            cmp al ,49
            jz remove
            cmp al ,50
            jz remove

            mov cx , point3_CarOne_x
            mov dx , point3_CarOne_y
            int 10h

            cmp al ,45
            jz remove
            cmp al ,46
            jz remove 
            cmp al ,47
            jz remove
            cmp al ,48
            jz remove
            cmp al ,49
            jz remove
            cmp al ,50
            jz remove

jmp collect2

remove: 
mov ah,0
mov power_up_num,ax
sub al,45
add al,al
add al,1
add Score_CarOne,al

setCursor 5,0, 0; for player num 1
mov ah,2
mov dl,Score_CarOne
int 21h
call erase_power_ups

collect2:


      mov ah , 0DH
      mov bh, 0
      mov cx , point1_CarTwo_x
      mov dx , point1_CarTwo_y
      int 10h

      cmp al ,45
      jz remove2
      cmp al ,46
      jz remove2 
      cmp al ,47
      jz remove2
      cmp al ,48
      jz remove2
      cmp al ,49
      jz remove2
      cmp al ,50
      jz remove2

      mov cx , point2_CarTwo_x
      mov dx , point2_CarTwo_y
      int 10h

      cmp al ,45
      jz remove2
      cmp al ,46
      jz remove2 
      cmp al ,47
      jz remove2
      cmp al ,48
      jz remove2
      cmp al ,49
      jz remove2
      cmp al ,50
      jz remove2 

      mov cx , point3_CarTwo_x
      mov dx , point3_CarTwo_y
      int 10h

      cmp al ,45
      jz remove2
      cmp al ,46
      jz remove2 
      cmp al ,47
      jz remove2
      cmp al ,48
      jz remove2
      cmp al ,49
      jz remove2
      cmp al ,50
      jz remove2
ret

remove2: 

mov ah,0
mov power_up_num,ax
sub al,45                        ; power 1 --> adds 1 to the score
add al,al                        ; power2 ---> adds 3 to the score
add al,1                         ; power3 ---> adds 5 to the score
add Score_CarTwo,al

setCursor 5,6  ,0              ; for player num 2
mov ah,2
mov dl,Score_CarTwo
int 21h
call erase_power_ups

ret
collect_power_up ENDP
;-------------------------------------------------------------
;----------------- Fill obstacles buffers --------------------
fill_obstacle_buffers PROC

     
            mov cx , 0       ; width of powrup =5
            mov dx , 0       ; height of powrup=10


            cmp obstacle_num , 1
                    je go1_obstacle
            cmp obstacle_num , 2
                    je go2_obstacle
            cmp obstacle_num , 3
                    je go3_obstacle
            cmp obstacle_num , 4
                    je go4_obstacle
            cmp obstacle_num , 5
                    je go5_obstacle
            cmp obstacle_num , 6
                    je go6_obstacle


            go1_obstacle:
                  mov DI , offset obstacle_1
                  mov ax,curr_obstacle_x
                  mov obstacle1x,ax
                  mov ax,curr_obstacle_y
                  mov obstacle1y,ax
                  jmp anything2
            go2_obstacle:
                  mov DI , offset obstacle_2
                  mov ax,curr_obstacle_x
                  mov obstacle2x,ax
                  mov ax,curr_obstacle_y
                  mov obstacle2y,ax
                  jmp anything2
            go3_obstacle:
                  mov DI , offset obstacle_3
                  mov ax,curr_obstacle_x
                  mov obstacle3x,ax
                  mov ax,curr_obstacle_y
                  mov obstacle3y,ax
                  jmp anything2
            go4_obstacle:
                  mov DI , offset obstacle_4
                  mov ax,curr_obstacle_x
                  mov obstacle4x,ax
                  mov ax,curr_obstacle_y
                  mov obstacle4y,ax
                  jmp anything2
            go5_obstacle:
                  mov DI , offset obstacle_5
                  mov ax,curr_obstacle_x
                  mov obstacle5x,ax
                  mov ax,curr_obstacle_y
                  mov obstacle5y,ax
                  jmp anything2
            go6_obstacle:
                  mov DI , offset obstacle_6
                  mov ax,curr_obstacle_x
                  mov obstacle6x,ax
                  mov ax,curr_obstacle_y
                  mov obstacle6y,ax
                  jmp anything2

           anything2:


           jmp star2
            
	filll2:

            add cx , curr_obstacle_x
            add dx , curr_obstacle_y
            ;-)) get color here  -((
            mov ah , 0DH
            mov bh, 0
            int 10h
            mov ah,0
            mov [DI] , al
            ;________________________

            sub cx , curr_obstacle_x
            sub dx , curr_obstacle_y

            inc cx
            inc di

	star2:                              ;  loop iteration in x direction
            cmp CX,11                     ; compare cx with the width of the power ups+1
	      JNZ filll2                  	;  check if we can draw c urrent x and y and excape the y iteration
	      mov Cx, 0 	                  ; if loop iteration in y direction, then x should start over so that we sweep the grid
	      inc DX 	                  ; loop iteration in y direction
            cmp dx,11                     ; compare dx with the height of the powerUp+1
	      JZ  ENDINGGG2           	;  both x and y reached 00 so end program
		Jmp filll2
ENDINGGG2: ret


ret
fill_obstacle_buffers ENDP
;-------------------------------------------------------------
;------------- Erase Obstacles -------------------------------
erase_obstacles PROC


            
	      MOV CX, 0    	;set the width (X) up to 64 (based on image resolution)
	      MOV DX, 0     	;set the hieght (Y) up to 64 (based on image resolution)
            cmp obstacle_num , 9
                    je er1_ob
            cmp obstacle_num , 10
                    je er2_ob
            cmp obstacle_num , 11
                    je er3_ob
            cmp obstacle_num , 12
                    je er4_ob        
            cmp obstacle_num , 13
                    je er5_ob
            cmp obstacle_num , 14
                    je er6_ob  


            er1_ob:
                  mov DI , offset obstacle_1
                  mov ax,obstacle1x
                  mov curr_obstacle_x,ax
                  mov ax,obstacle1y
                  mov curr_obstacle_y,ax
                  jmp staaa
            er2_ob:
                  mov DI , offset obstacle_2
                  mov ax,obstacle2x
                  mov curr_obstacle_x,ax
                  mov ax,obstacle2y
                  mov curr_obstacle_y,ax
                  jmp staaa
            er3_ob:
                  mov DI , offset obstacle_3
                  mov ax,obstacle3x
                  mov curr_obstacle_x,ax
                  mov ax,obstacle3y
                  mov curr_obstacle_y,ax
                  jmp staaa
            er4_ob:
                  mov DI , offset obstacle_4
                  mov ax,obstacle4x
                  mov curr_obstacle_x,ax
                  mov ax,obstacle4y
                  mov curr_obstacle_y,ax
                  jmp staaa
            er5_ob:
                  mov DI , offset obstacle_5
                  mov ax,obstacle5x
                  mov curr_obstacle_x,ax
                  mov ax,obstacle5y
                  mov curr_obstacle_y,ax
                  jmp staaa
            er6_ob:
                  mov DI , offset obstacle_6
                  mov ax,obstacle6x
                  mov curr_obstacle_x,ax
                  mov ax,obstacle6y
                  mov curr_obstacle_y,ax
                  jmp staaa


	erase_obstacle:
            add cx,  curr_obstacle_x
            add dx , curr_obstacle_y
            MOV AH,0Ch   	;set the configuration to writing a pixel
            mov al, [DI]    ; color of the current coordinates
            MOV BH,00h   	;set the page number
            INT 10h      	;execute the configuration
            sub cx , curr_obstacle_x
            sub dx , curr_obstacle_y
            inc di
            inc cx
      staaa:      	
            cmp cx,11                     ; compare with the width of the poweups+1
	      JNZ erase_obstacle           ;  check if we can draw c urrent x and y and excape the y iteration
	      mov Cx, 0 	                 ;  if loop iteration in y direction, then x should start over so that we sweep the grid
	      inc DX 	      	     ;  loop iteration in y direction
            cmp dx,11                    ; compare with the height of the powerUps+1
	      JZ ENDING_erase_obstacle   	;  both x and y reached 00 so end program
		Jmp erase_obstacle

ENDING_erase_obstacle:

ret
erase_obstacles ENDP   
;------------------------------------------------------------
;---------------- Collect Obstacles -------------------------
collect_obstacles PROC

            mov ah , 0DH
            mov bh, 0
            mov cx , point1_CarOne_x
            mov dx , point1_CarOne_y
            int 10h

            cmp al ,9
            jz remove_ob
            cmp al ,10
            jz remove_ob
            cmp al ,11
            jz remove_ob
            cmp al ,12
            jz remove_ob
            cmp al ,13
            jz remove_ob
            cmp al ,14
            jz remove_ob


            mov cx , point2_CarOne_x
            mov dx , point2_CarOne_y
            int 10h

            cmp al ,9
            jz remove_ob
            cmp al ,10
            jz remove_ob
            cmp al ,11
            jz remove_ob
            cmp al ,12
            jz remove_ob
            cmp al ,13
            jz remove_ob
            cmp al ,14
            jz remove_ob

            mov cx , point3_CarOne_x
            mov dx , point3_CarOne_y
            int 10h

            cmp al ,9
            jz remove_ob
            cmp al ,10
            jz remove_ob
            cmp al ,11
            jz remove_ob
            cmp al ,12
            jz remove_ob
            cmp al ,13
            jz remove_ob
            cmp al ,14
            jz remove_ob

jmp collect2_ob

remove_ob: 
mov ah,0
mov obstacle_num,ax

dec Score_CarOne
mov al,Score_CarOne

call set_score         ; the min score must be zero always
mov Score_CarOne,al

setCursor 5,0,0           ; for player num 1
mov ah,2
mov dl,Score_CarOne
int 21h
call erase_obstacles

collect2_ob:

            mov ah , 0DH
            mov bh, 0
            mov cx , point1_CarTwo_x
            mov dx , point1_CarTwo_y
            int 10h

            cmp al ,9
            jz remove_ob2
            cmp al ,10
            jz remove_ob2
            cmp al ,11
            jz remove_ob2
            cmp al ,12
            jz remove_ob2
            cmp al ,13
            jz remove_ob2
            cmp al ,14
            jz remove_ob2           


            mov cx , point2_CarTwo_x
            mov dx , point2_CarTwo_y
            int 10h


            cmp al ,9
            jz remove_ob2
            cmp al ,10
            jz remove_ob2
            cmp al ,11
            jz remove_ob2
            cmp al ,12
            jz remove_ob2
            cmp al ,13
            jz remove_ob2
            cmp al ,14
            jz remove_ob2 

            mov cx , point3_CarTwo_x
            mov dx , point3_CarTwo_y
            int 10h

            cmp al ,9
            jz remove_ob2
            cmp al ,10
            jz remove_ob2
            cmp al ,11
            jz remove_ob2
            cmp al ,12
            jz remove_ob2
            cmp al ,13
            jz remove_ob2
            cmp al ,14
            jz remove_ob2 

ret

remove_ob2: 
mov ah,0
mov obstacle_num,ax

dec Score_CarTwo
mov al,Score_CarTwo 

call set_score                     ; the min score must be zero always
mov Score_CarTwo,al
setCursor 5,6,0                  ; for player num 2
mov ah,2
mov dl,Score_CarTwo
int 21h
call erase_obstacles


ret
collect_obstacles ENDP
;--------------------------------------
;------------- Set Score --------------
set_score proc
cmp al,48
jle change_to_zero
ret
change_to_zero:
mov al,48                 ; ascii code of 0
ret
set_score endp
;----------------------------------------
;----------- Who_Win ????? --------------
who_win proc
; clear screen
mov ax,0600h
mov bh,07h
mov cx,0
mov dx,184fH
int 10h

setCursor 12,12,0

mov al,Score_CarOne
mov ah,Score_CarTwo
cmp al,ah


jg playerOne
jl playerTwo
je gameDraw

PlayerOne:
      
      showMes player1[2]
      setCursor 12,17,0
      showMes winner_messege
ret
playerTwo:
      showMes player2[2]
      setCursor 12,17,0
      showMes winner_messege
ret
gameDraw:
 showMes Draw_message
ret
who_win endp
;-------------------------------------------------
END MAIN        ; End of the program




